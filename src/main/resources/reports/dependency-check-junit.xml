<?xml version="1.0" encoding="UTF-8"?><testsuites failures="396" name="dependency-check" tests="112"><testsuite failures="0" errors="0" time="0" id="0" name="/home/khannasa/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar" package="HdrHistogram-2.1.9.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="HdrHistogram-2.1.9.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="1" name="/home/khannasa/.m2/repository/net/minidev/accessors-smart/1.1/accessors-smart-1.1.jar" package="accessors-smart-1.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="accessors-smart-1.1.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="2" name="/home/khannasa/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar" package="animal-sniffer-annotations-1.14.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="animal-sniffer-annotations-1.14.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="3" name="/home/khannasa/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar" package="antlr-2.7.7.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="antlr-2.7.7.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="4" name="/home/khannasa/.m2/repository/org/antlr/antlr-runtime/3.4/antlr-runtime-3.4.jar" package="antlr-runtime-3.4.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="antlr-runtime-3.4.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="5" name="/home/khannasa/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar" package="aopalliance-1.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="aopalliance-1.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="6" name="/home/khannasa/.m2/repository/com/netflix/archaius/archaius-core/0.7.4/archaius-core-0.7.4.jar" package="archaius-core-0.7.4.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="archaius-core-0.7.4.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="7" name="/home/khannasa/.m2/repository/asm/asm/3.3.1/asm-3.3.1.jar" package="asm-3.3.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="asm-3.3.1.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="8" name="/home/khannasa/.m2/repository/org/ow2/asm/asm/5.0.4/asm-5.0.4.jar" package="asm-5.0.4.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="asm-5.0.4.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="9" name="/home/khannasa/.m2/repository/org/bouncycastle/bcpkix-jdk15on/1.55/bcpkix-jdk15on-1.55.jar" package="bcpkix-jdk15on-1.55.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-26939" name="pkg:maven/org.bouncycastle/bcpkix-jdk15on@1.55"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>In Legion of the Bouncy Castle BC before 1.61 and BC-FJA before 1.0.1.2, attackers can obtain sensitive information about a private exponent because of Observable Differences in Behavior to Error Inputs. This occurs in org.bouncycastle.crypto.encodings.OAEPEncoding. Sending invalid ciphertext that decrypts to a short payload in the OAEP Decoder could result in the throwing of an early exception, potentially leaking some information about the private exponent of the RSA private key performing the encryption.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcpkix-jdk15on/1.55/bcpkix-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="16" errors="0" time="0" id="10" name="/home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar" package="bcprov-jdk15on-1.55.jar" skipped="0" tests="16" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2016-1000338" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>In Bouncy Castle JCE Provider version 1.55 and earlier the DSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of &apos;invisible&apos; data into a signed structure.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-1000340" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>In the Bouncy Castle JCE Provider versions 1.51 to 1.55, a carry propagation bug was introduced in the implementation of squaring for several raw math classes have been fixed (org.bouncycastle.math.raw.Nat???). These classes are used by our custom elliptic curve implementations (org.bouncycastle.math.ec.custom.**), so there was the possibility of rare (in general usage) spurious calculations for elliptic curve scalar multiplications. Such errors would have been detected with high probability by the output validation for our scalar multipliers.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-1000342" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>In the Bouncy Castle JCE Provider version 1.55 and earlier ECDSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of &apos;invisible&apos; data into a signed structure.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-1000343" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>In the Bouncy Castle JCE Provider version 1.55 and earlier the DSA key pair generator generates a weak private key if used with default values. If the JCA key pair generator is not explicitly initialised with DSA parameters, 1.55 and earlier generates a private value assuming a 1024 bit key size. In earlier releases this can be dealt with by explicitly passing parameters to the key pair generator.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1000180" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-1000344" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: HIGH, score: 7.4 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N)"/><system-out>In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-1000352" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: HIGH, score: 7.4 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N)"/><system-out>In the Bouncy Castle JCE Provider version 1.55 and earlier the ECIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-1000341" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>In the Bouncy Castle JCE Provider version 1.55 and earlier DSA signature generation is vulnerable to timing attack. Where timings can be closely observed for the generation of signatures, the lack of blinding in 1.55, or earlier, may allow an attacker to gain information about the signature&apos;s k value and ultimately the private value as well.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-1000345" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES/ECIES CBC mode vulnerable to padding oracle attack. For BC 1.55 and older, in an environment where timings can be easily observed, it is possible with enough observations to identify when the decryption is failing due to padding.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2017-13098" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>BouncyCastle TLS prior to version 1.0.3, when configured to use the JCE (Java Cryptography Extension) for cryptographic functions, provides a weak Bleichenbacher oracle when any TLS cipher suite using RSA key exchange is negotiated. An attacker can recover the private key from a vulnerable application. This vulnerability is referred to as &quot;ROBOT.&quot;</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-15522" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Bouncy Castle BC Java before 1.66, BC C# .NET before 1.8.7, BC-FJA before 1.0.1.2, 1.0.2.1, and BC-FNA before 1.0.1.1 have a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-0187" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV2: MEDIUM, score: 5.5 (/AV:L/AC:L/Au:/C:H/I:N/A:N)"/><system-out>In engineSetMode of BaseBlockCipher.java, there is a possible incorrect cryptographic algorithm chosen due to an incomplete comparison. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10Android ID: A-148517383</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-1000339" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>In the Bouncy Castle JCE Provider version 1.55 and earlier the primary engine class used for AES was AESFastEngine. Due to the highly table driven approach used in the algorithm it turns out that if the data channel on the CPU can be monitored the lookup table accesses are sufficient to leak information on the AES key being used. There was also a leak in AESEngine although it was substantially less. AESEngine has been modified to remove any signs of leakage (testing carried out on Intel X86-64) and is now the primary AES class for the BC JCE provider from 1.56. Use of AESFastEngine is now only recommended where otherwise deemed appropriate.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-26939" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>In Legion of the Bouncy Castle BC before 1.61 and BC-FJA before 1.0.1.2, attackers can obtain sensitive information about a private exponent because of Observable Differences in Behavior to Error Inputs. This occurs in org.bouncycastle.crypto.encodings.OAEPEncoding. Sending invalid ciphertext that decrypts to a short payload in the OAEP Decoder could result in the throwing of an early exception, potentially leaking some information about the private exponent of the RSA private key performing the encryption.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-33201" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV2: MEDIUM, score: 5.3 (/AV:N/AC:L/Au:/C:L/I:N/A:N)"/><system-out>Bouncy Castle For Java before 1.74 is affected by an LDAP injection vulnerability. The vulnerability only affects applications that use an LDAP CertStore from Bouncy Castle to validate X.509 certificates. During the certificate validation process, Bouncy Castle inserts the certificate&apos;s Subject Name into an LDAP search filter without any escaping, which leads to an LDAP injection vulnerability.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-1000346" name="pkg:maven/org.bouncycastle/bcprov-jdk15on@1.55"><failure message="cvssV3: LOW, score: 3.7 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>In the Bouncy Castle JCE Provider version 1.55 and earlier the other party DH public key is not fully validated. This can cause issues as invalid keys can be used to reveal details about the other party&apos;s private key where static Diffie-Hellman is in use. As of release 1.56 the key parameters are checked on agreement calculation.</system-out><system-err>location: /home/khannasa/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.55/bcprov-jdk15on-1.55.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="11" name="/home/khannasa/.m2/repository/net/bytebuddy/byte-buddy/1.8.12/byte-buddy-1.8.12.jar/META-INF/maven/net.bytebuddy/byte-buddy-dep/pom.xml" package="byte-buddy-1.8.12.jar (shaded: net.bytebuddy:byte-buddy-dep:1.8.12)" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="byte-buddy-1.8.12.jar (shaded: net.bytebuddy:byte-buddy-dep:1.8.12)"/></testsuite><testsuite failures="0" errors="0" time="0" id="12" name="/home/khannasa/.m2/repository/net/bytebuddy/byte-buddy/1.8.12/byte-buddy-1.8.12.jar" package="byte-buddy-1.8.12.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="byte-buddy-1.8.12.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="13" name="/home/khannasa/.m2/repository/cglib/cglib/2.2.2/cglib-2.2.2.jar" package="cglib-2.2.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="cglib-2.2.2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="14" name="/home/khannasa/.m2/repository/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0.jar" package="checker-qual-3.5.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="checker-qual-3.5.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="15" name="/home/khannasa/.m2/repository/com/fasterxml/classmate/1.3.3/classmate-1.3.3.jar" package="classmate-1.3.3.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="classmate-1.3.3.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="16" name="/home/khannasa/.m2/repository/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar" package="commons-beanutils-1.9.4.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="commons-beanutils-1.9.4.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="17" name="/home/khannasa/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar" package="commons-codec-1.10.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="commons-codec-1.10.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="18" name="/home/khannasa/.m2/repository/commons-collections/commons-collections/3.1/commons-collections-3.1.jar" package="commons-collections-3.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2015-6420" name="pkg:maven/commons-collections/commons-collections@3.1"><failure message="cvssV2: HIGH, score: 7.5 (/AV:N/AC:L/Au:N/C:P/I:P/A:P)"/><system-out>Serialized-object interfaces in certain Cisco Collaboration and Social Media; Endpoint Clients and Client Software; Network Application, Service, and Acceleration; Network and Content Security Devices; Network Management and Provisioning; Routing and Switching - Enterprise and Service Provider; Unified Computing; Voice and Unified Communications Devices; Video, Streaming, TelePresence, and Transcoding Devices; Wireless; and Cisco Hosted Services products allow remote attackers to execute arbitrary commands via a crafted serialized Java object, related to the Apache Commons Collections (ACC) library.</system-out><system-err>location: /home/khannasa/.m2/repository/commons-collections/commons-collections/3.1/commons-collections-3.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="19" name="/home/khannasa/.m2/repository/commons-configuration/commons-configuration/1.8/commons-configuration-1.8.jar" package="commons-configuration-1.8.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="commons-configuration-1.8.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="20" name="/home/khannasa/.m2/repository/org/apache/commons/commons-digester3/3.2/commons-digester3-3.2.jar" package="commons-digester3-3.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="commons-digester3-3.2.jar"/></testsuite><testsuite failures="2" errors="0" time="0" id="21" name="/home/khannasa/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar" package="commons-httpclient-3.1.jar" skipped="0" tests="2" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2012-5783" name="pkg:maven/commons-httpclient/commons-httpclient@3.1"><failure message="cvssV2: MEDIUM, score: 5.8 (/AV:N/AC:M/Au:N/C:P/I:P/A:N)"/><system-out>Apache Commons HttpClient 3.x, as used in Amazon Flexible Payments Service (FPS) merchant Java SDK and other products, does not verify that the server hostname matches a domain name in the subject&apos;s Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.</system-out><system-err>location: /home/khannasa/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-13956" name="pkg:maven/commons-httpclient/commons-httpclient@3.1"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution.</system-out><system-err>location: /home/khannasa/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="22" name="/home/khannasa/.m2/repository/commons-io/commons-io/2.5/commons-io-2.5.jar" package="commons-io-2.5.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2021-29425" name="pkg:maven/commons-io/commons-io@2.5"><failure message="cvssV3: MEDIUM, score: 4.8 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N)"/><system-out>In Apache Commons IO before 2.7, When invoking the method FileNameUtils.normalize with an improper input string, like &quot;//../foo&quot;, or &quot;\\..\foo&quot;, the result would be the same value, thus possibly providing access to files in the parent directory, but not further above (thus &quot;limited&quot; path traversal), if the calling code would use the result to construct a path value.</system-out><system-err>location: /home/khannasa/.m2/repository/commons-io/commons-io/2.5/commons-io-2.5.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="3" errors="0" time="0" id="23" name="/home/khannasa/.m2/repository/commons-jxpath/commons-jxpath/1.3/commons-jxpath-1.3.jar" package="commons-jxpath-1.3.jar" skipped="0" tests="3" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-41852" name="pkg:maven/commons-jxpath/commons-jxpath@1.3"><failure message="cvssV2: HIGH, score: 9.8 (/AV:N/AC:L/Au:/C:H/I:H/A:H)"/><system-out>Rejected reason: DO NOT USE THIS CANDIDATE NUMBER. ConsultIDs: none. Reason: This candidate was withdrawn by its CNA. Further investigation showed that it was not a security issue. Notes: none.

Sonatype&apos;s research suggests that this CVE&apos;s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2022-41852 for details</system-out><system-err>location: /home/khannasa/.m2/repository/commons-jxpath/commons-jxpath/1.3/commons-jxpath-1.3.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2022-40159" name="pkg:maven/commons-jxpath/commons-jxpath@1.3"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>** DISPUTED ** This record was originally reported by the oss-fuzz project who failed to consider the security context in which JXPath is intended to be used and failed to contact the JXPath maintainers prior to requesting the CVE allocation. The CVE was then allocated by Google in breach of the CNA rules. After review by the JXPath maintainers, the original report was found to be invalid.</system-out><system-err>location: /home/khannasa/.m2/repository/commons-jxpath/commons-jxpath/1.3/commons-jxpath-1.3.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2022-40160" name="pkg:maven/commons-jxpath/commons-jxpath@1.3"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>** DISPUTED ** This record was originally reported by the oss-fuzz project who failed to consider the security context in which JXPath is intended to be used and failed to contact the JXPath maintainers prior to requesting the CVE allocation. The CVE was then allocated by Google in breach of the CNA rules. After review by the JXPath maintainers, the original report was found to be invalid.</system-out><system-err>location: /home/khannasa/.m2/repository/commons-jxpath/commons-jxpath/1.3/commons-jxpath-1.3.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="24" name="/home/khannasa/.m2/repository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar" package="commons-lang-2.4.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="commons-lang-2.4.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="25" name="/home/khannasa/.m2/repository/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar" package="commons-logging-1.1.3.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="commons-logging-1.1.3.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="26" name="/home/khannasa/.m2/repository/org/apache/commons/commons-math/2.2/commons-math-2.2.jar" package="commons-math-2.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="commons-math-2.2.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="27" name="/home/khannasa/.m2/repository/commons-net/commons-net/3.6/commons-net-3.6.jar" package="commons-net-3.6.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2021-37533" name="pkg:maven/commons-net/commons-net@3.6"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N)"/><system-out>Prior to Apache Commons Net 3.9.0, Net&apos;s FTP client trusts the host from PASV response by default. A malicious server can redirect the Commons Net code to use a different host, but the user has to connect to the malicious server in the first place. This may lead to leakage of information about services running on the private network of the client. The default in version 3.9.0 is now false to ignore such hosts, as cURL does. See https://issues.apache.org/jira/browse/NET-711.</system-out><system-err>location: /home/khannasa/.m2/repository/commons-net/commons-net/3.6/commons-net-3.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="3" errors="0" time="0" id="28" name="/home/khannasa/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar" package="dom4j-1.6.1.jar" skipped="0" tests="3" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-10683" name="pkg:maven/dom4j/dom4j@1.6.1"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>dom4j before 2.0.3 and 2.1.x before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j.</system-out><system-err>location: /home/khannasa/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1000632" name="pkg:maven/dom4j/dom4j@1.6.1"><failure message="cvssV2: HIGH, score: 7.5 (/AV:N/AC:L/Au:/C:N/I:H/A:N)"/><system-out>dom4j version prior to version 2.1.1 contains a CWE-91: XML Injection vulnerability in Class: Element. Methods: addElement, addAttribute that can result in an attacker tampering with XML documents through XML injection. This attack appear to be exploitable via an attacker specifying attributes or elements in the XML document. This vulnerability appears to have been fixed in 2.1.1 or later.</system-out><system-err>location: /home/khannasa/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-45960" name="pkg:maven/dom4j/dom4j@1.6.1"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>An issue in dom4.j org.dom4.io.SAXReader v.2.1.4 and before allows a remote attacker to obtain sensitive information via the setFeature function. NOTE: the vendor and original reporter indicate that this is not a vulnerability because setFeature only sets features, which &quot;can be safe in one case and unsafe in another.&quot;</system-out><system-err>location: /home/khannasa/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="3" errors="0" time="0" id="29" name="/home/khannasa/.m2/repository/org/dom4j/dom4j/2.1.0/dom4j-2.1.0.jar" package="dom4j-2.1.0.jar" skipped="0" tests="3" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-10683" name="pkg:maven/org.dom4j/dom4j@2.1.0"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>dom4j before 2.0.3 and 2.1.x before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j.</system-out><system-err>location: /home/khannasa/.m2/repository/org/dom4j/dom4j/2.1.0/dom4j-2.1.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1000632" name="pkg:maven/org.dom4j/dom4j@2.1.0"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>dom4j version prior to version 2.1.1 contains a CWE-91: XML Injection vulnerability in Class: Element. Methods: addElement, addAttribute that can result in an attacker tampering with XML documents through XML injection. This attack appear to be exploitable via an attacker specifying attributes or elements in the XML document. This vulnerability appears to have been fixed in 2.1.1 or later.</system-out><system-err>location: /home/khannasa/.m2/repository/org/dom4j/dom4j/2.1.0/dom4j-2.1.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-45960" name="pkg:maven/org.dom4j/dom4j@2.1.0"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>An issue in dom4.j org.dom4.io.SAXReader v.2.1.4 and before allows a remote attacker to obtain sensitive information via the setFeature function. NOTE: the vendor and original reporter indicate that this is not a vulnerability because setFeature only sets features, which &quot;can be safe in one case and unsafe in another.&quot;</system-out><system-err>location: /home/khannasa/.m2/repository/org/dom4j/dom4j/2.1.0/dom4j-2.1.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="30" name="/home/khannasa/.m2/repository/com/google/errorprone/error_prone_annotations/2.0.18/error_prone_annotations-2.0.18.jar" package="error_prone_annotations-2.0.18.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="error_prone_annotations-2.0.18.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="31" name="/home/khannasa/.m2/repository/com/netflix/eureka/eureka-client/1.4.11/eureka-client-1.4.11.jar" package="eureka-client-1.4.11.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="eureka-client-1.4.11.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="32" name="/home/khannasa/.m2/repository/com/netflix/eureka/eureka-core/1.4.11/eureka-core-1.4.11.jar" package="eureka-core-1.4.11.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="eureka-core-1.4.11.jar"/></testsuite><testsuite failures="2" errors="0" time="0" id="33" name="/home/khannasa/.m2/repository/com/alibaba/fastjson/1.2.24/fastjson-1.2.24.jar" package="fastjson-1.2.24.jar" skipped="0" tests="2" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2017-18349" name="pkg:maven/com.alibaba/fastjson@1.2.24"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>parseObject in Fastjson before 1.2.25, as used in FastjsonEngine in Pippo 1.11.0 and other products, allows remote attackers to execute arbitrary code via a crafted JSON request, as demonstrated by a crafted rmi:// URI in the dataSourceName field of HTTP POST data to the Pippo /json URI, which is mishandled in AjaxApplication.java.</system-out><system-err>location: /home/khannasa/.m2/repository/com/alibaba/fastjson/1.2.24/fastjson-1.2.24.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-25845" name="pkg:maven/com.alibaba/fastjson@1.2.24"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>The package com.alibaba:fastjson before 1.2.83 are vulnerable to Deserialization of Untrusted Data by bypassing the default autoType shutdown restrictions, which is possible under certain conditions. Exploiting this vulnerability allows attacking remote servers. Workaround: If upgrading is not possible, you can enable [safeMode](https://github.com/alibaba/fastjson/wiki/fastjson_safemode).</system-out><system-err>location: /home/khannasa/.m2/repository/com/alibaba/fastjson/1.2.24/fastjson-1.2.24.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="34" name="/home/khannasa/.m2/repository/org/apache/httpcomponents/fluent-hc/4.3.6/fluent-hc-4.3.6.jar" package="fluent-hc-4.3.6.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-13956" name="pkg:maven/org.apache.httpcomponents/fluent-hc@4.3.6"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/httpcomponents/fluent-hc/4.3.6/fluent-hc-4.3.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="35" name="/home/khannasa/.m2/repository/com/netflix/governator/governator/1.12.10/governator-1.12.10.jar" package="governator-1.12.10.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="governator-1.12.10.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="36" name="/home/khannasa/.m2/repository/com/netflix/governator/governator-api/1.12.10/governator-api-1.12.10.jar" package="governator-api-1.12.10.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="governator-api-1.12.10.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="37" name="/home/khannasa/.m2/repository/com/netflix/governator/governator-core/1.12.10/governator-core-1.12.10.jar" package="governator-core-1.12.10.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="governator-core-1.12.10.jar"/></testsuite><testsuite failures="2" errors="0" time="0" id="38" name="/home/khannasa/.m2/repository/org/codehaus/groovy/groovy/2.4.7/groovy-2.4.7.jar" package="groovy-2.4.7.jar" skipped="0" tests="2" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2016-6814" name="pkg:maven/org.codehaus.groovy/groovy@2.4.7"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>When an application with unsupported Codehaus versions of Groovy from 1.7.0 to 2.4.3, Apache Groovy 2.4.4 to 2.4.7 on classpath uses standard Java serialization mechanisms, e.g. to communicate between servers or to store local data, it was possible for an attacker to bake a special serialized object that will execute code directly when deserialized. All applications which rely on serialization and do not isolate the code which deserializes objects were subject to this vulnerability.</system-out><system-err>location: /home/khannasa/.m2/repository/org/codehaus/groovy/groovy/2.4.7/groovy-2.4.7.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-17521" name="pkg:maven/org.codehaus.groovy/groovy@2.4.7"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Apache Groovy provides extension methods to aid with creating temporary directories. Prior to this fix, Groovy&apos;s implementation of those extension methods was using a now superseded Java JDK method call that is potentially not secure on some operating systems in some contexts. Users not using the extension methods mentioned in the advisory are not affected, but may wish to read the advisory for further details. Versions Affected: 2.0 to 2.4.20, 2.5.0 to 2.5.13, 3.0.0 to 3.0.6, and 4.0.0-alpha-1. Fixed in versions 2.4.21, 2.5.14, 3.0.7, 4.0.0-alpha-2.</system-out><system-err>location: /home/khannasa/.m2/repository/org/codehaus/groovy/groovy/2.4.7/groovy-2.4.7.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="39" name="/home/khannasa/.m2/repository/com/google/code/gson/gson/2.8.0/gson-2.8.0.jar" package="gson-2.8.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-25647" name="pkg:maven/com.google.code.gson/gson@2.8.0"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The package com.google.code.gson:gson before 2.8.9 are vulnerable to Deserialization of Untrusted Data via the writeReplace() method in internal classes, which may lead to DoS attacks.</system-out><system-err>location: /home/khannasa/.m2/repository/com/google/code/gson/gson/2.8.0/gson-2.8.0.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase></testsuite><testsuite failures="3" errors="0" time="0" id="40" name="/home/khannasa/.m2/repository/com/google/guava/guava/23.0/guava-23.0.jar" package="guava-23.0.jar" skipped="0" tests="3" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2023-2976" name="pkg:maven/com.google.guava/guava@23.0"><failure message="cvssV3: HIGH, score: 7.1 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N)"/><system-out>Use of Java&apos;s default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.

Even though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.

</system-out><system-err>location: /home/khannasa/.m2/repository/com/google/guava/guava/23.0/guava-23.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-10237" name="pkg:maven/com.google.guava/guava@23.0"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Unbounded memory allocation in Google Guava 11.0 through 24.x before 24.1.1 allows remote attackers to conduct denial of service attacks against servers that depend on this library and deserialize attacker-provided data, because the AtomicDoubleArray class (when serialized with Java serialization) and the CompoundOrdering class (when serialized with GWT serialization) perform eager allocation without appropriate checks on what a client has sent and whether the data size is reasonable.</system-out><system-err>location: /home/khannasa/.m2/repository/com/google/guava/guava/23.0/guava-23.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-8908" name="pkg:maven/com.google.guava/guava@23.0"><failure message="cvssV3: LOW, score: 3.3 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N)"/><system-out>A temp directory creation vulnerability exists in all versions of Guava, allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava API com.google.common.io.Files.createTempDir(). By default, on unix-like systems, the created directory is world-readable (readable by an attacker with access to the system). The method in question has been marked @Deprecated in versions 30.0 and later and should not be used. For Android developers, we recommend choosing a temporary directory API provided by Android, such as context.getCacheDir(). For other Java developers, we recommend migrating to the Java 7 API java.nio.file.Files.createTempDirectory() which explicitly configures permissions of 700, or configuring the Java runtime&apos;s java.io.tmpdir system property to point to a location whose permissions are appropriately configured.

</system-out><system-err>location: /home/khannasa/.m2/repository/com/google/guava/guava/23.0/guava-23.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="41" name="/home/khannasa/.m2/repository/com/google/inject/guice/4.0/guice-4.0.jar" package="guice-4.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="guice-4.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="42" name="/home/khannasa/.m2/repository/com/google/inject/extensions/guice-assistedinject/4.0/guice-assistedinject-4.0.jar" package="guice-assistedinject-4.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="guice-assistedinject-4.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="43" name="/home/khannasa/.m2/repository/com/google/inject/extensions/guice-grapher/4.0/guice-grapher-4.0.jar" package="guice-grapher-4.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="guice-grapher-4.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="44" name="/home/khannasa/.m2/repository/com/google/inject/extensions/guice-multibindings/4.0/guice-multibindings-4.0.jar" package="guice-multibindings-4.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="guice-multibindings-4.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="45" name="/home/khannasa/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar" package="hamcrest-core-1.3.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="hamcrest-core-1.3.jar"/></testsuite><testsuite failures="5" errors="0" time="0" id="46" name="/home/khannasa/.m2/repository/org/hibernate/hibernate-validator/5.3.4.Final/hibernate-validator-5.3.4.Final.jar" package="hibernate-validator-5.3.4.Final.jar" skipped="0" tests="5" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-25638" name="pkg:maven/org.hibernate/hibernate-validator@5.3.4.Final"><failure message="cvssV3: HIGH, score: 7.4 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N)"/><system-out>A flaw was found in hibernate-core in versions prior to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity.</system-out><system-err>location: /home/khannasa/.m2/repository/org/hibernate/hibernate-validator/5.3.4.Final/hibernate-validator-5.3.4.Final.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2017-7536" name="pkg:maven/org.hibernate/hibernate-validator@5.3.4.Final"><failure message="cvssV3: HIGH, score: 7.0 (CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In Hibernate Validator 5.2.x before 5.2.5 final, 5.3.x, and 5.4.x, it was found that when the security manager&apos;s reflective permissions, which allows it to access the private members of the class, are granted to Hibernate Validator, a potential privilege escalation can occur. By allowing the calling code to access those private members without the permission an attacker may be able to validate an invalid instance and access the private member value via ConstraintViolation#getInvalidValue().</system-out><system-err>location: /home/khannasa/.m2/repository/org/hibernate/hibernate-validator/5.3.4.Final/hibernate-validator-5.3.4.Final.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-14900" name="pkg:maven/org.hibernate/hibernate-validator@5.3.4.Final"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>A flaw was found in Hibernate ORM in versions before 5.3.18, 5.4.18 and 5.5.0.Beta1. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SELECT or GROUP BY parts of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks.</system-out><system-err>location: /home/khannasa/.m2/repository/org/hibernate/hibernate-validator/5.3.4.Final/hibernate-validator-5.3.4.Final.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-10219" name="pkg:maven/org.hibernate/hibernate-validator@5.3.4.Final"><failure message="cvssV3: MEDIUM, score: 6.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N)"/><system-out>A vulnerability was found in Hibernate-Validator. The SafeHtml validator annotation fails to properly sanitize payloads consisting of potentially malicious code in HTML comments and instructions. This vulnerability can result in an XSS attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/hibernate/hibernate-validator/5.3.4.Final/hibernate-validator-5.3.4.Final.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-10693" name="pkg:maven/org.hibernate/hibernate-validator@5.3.4.Final"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>A flaw was found in Hibernate Validator version 6.1.2.Final. A bug in the message interpolation processor enables invalid EL expressions to be evaluated as if they were valid. This flaw allows attackers to bypass input sanitation (escaping, stripping) controls that developers may have put in place when handling user-controlled data in error messages.</system-out><system-err>location: /home/khannasa/.m2/repository/org/hibernate/hibernate-validator/5.3.4.Final/hibernate-validator-5.3.4.Final.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="47" name="/home/khannasa/.m2/repository/org/apache/httpcomponents/httpasyncclient/4.1.4/httpasyncclient-4.1.4.jar" package="httpasyncclient-4.1.4.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="httpasyncclient-4.1.4.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="48" name="/home/khannasa/.m2/repository/org/apache/httpcomponents/httpclient/4.5.12/httpclient-4.5.12.jar" package="httpclient-4.5.12.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-13956" name="pkg:maven/org.apache.httpcomponents/httpclient@4.5.12"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/httpcomponents/httpclient/4.5.12/httpclient-4.5.12.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="49" name="/home/khannasa/.m2/repository/org/apache/httpcomponents/httpcore/4.4.6/httpcore-4.4.6.jar" package="httpcore-4.4.6.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="httpcore-4.4.6.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="50" name="/home/khannasa/.m2/repository/org/apache/httpcomponents/httpcore-nio/4.4.10/httpcore-nio-4.4.10.jar" package="httpcore-nio-4.4.10.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="httpcore-nio-4.4.10.jar"/></testsuite><testsuite failures="5" errors="0" time="0" id="51" name="/home/khannasa/.m2/repository/cn/hutool/hutool-all/5.8.10/hutool-all-5.8.10.jar" package="hutool-all-5.8.10.jar" skipped="0" tests="5" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-4565" name="pkg:maven/cn.hutool/hutool-all@5.8.10"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>A vulnerability classified as problematic was found in Dromara HuTool up to 5.8.10. This vulnerability affects unknown code of the file cn.hutool.core.util.ZipUtil.java. The manipulation leads to resource consumption. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 5.8.11 is able to address this issue. It is recommended to upgrade the affected component. VDB-215974 is the identifier assigned to this vulnerability.</system-out><system-err>location: /home/khannasa/.m2/repository/cn/hutool/hutool-all/5.8.10/hutool-all-5.8.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-45688" name="pkg:maven/cn.hutool/hutool-all@5.8.10"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>A stack overflow in the XML.toJSONObject component of hutool-json v5.8.10 allows attackers to cause a Denial of Service (DoS) via crafted JSON or XML data.</system-out><system-err>location: /home/khannasa/.m2/repository/cn/hutool/hutool-all/5.8.10/hutool-all-5.8.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-45689" name="pkg:maven/cn.hutool/hutool-all@5.8.10"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>hutool-json v5.8.10 was discovered to contain an out of memory error.</system-out><system-err>location: /home/khannasa/.m2/repository/cn/hutool/hutool-all/5.8.10/hutool-all-5.8.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-45690" name="pkg:maven/cn.hutool/hutool-all@5.8.10"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>A stack overflow in the org.json.JSONTokener.nextValue::JSONTokener.java component of hutool-json v5.8.10 allows attackers to cause a Denial of Service (DoS) via crafted JSON or XML data.</system-out><system-err>location: /home/khannasa/.m2/repository/cn/hutool/hutool-all/5.8.10/hutool-all-5.8.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-33695" name="pkg:maven/cn.hutool/hutool-all@5.8.10"><failure message="cvssV3: HIGH, score: 7.1 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N)"/><system-out>Hutool v5.8.17 and below was discovered to contain an information disclosure vulnerability via the File.createTempFile() function at /core/io/FileUtil.java.</system-out><system-err>location: /home/khannasa/.m2/repository/cn/hutool/hutool-all/5.8.10/hutool-all-5.8.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="52" name="/home/khannasa/.m2/repository/com/netflix/hystrix/hystrix-core/1.5.5/hystrix-core-1.5.5.jar" package="hystrix-core-1.5.5.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="hystrix-core-1.5.5.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="53" name="/home/khannasa/.m2/repository/com/ibm/icu/icu4j/4.6/icu4j-4.6.jar" package="icu4j-4.6.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="icu4j-4.6.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="54" name="/home/khannasa/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar" package="j2objc-annotations-1.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="j2objc-annotations-1.1.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="55" name="/home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar" package="jackson-annotations-2.8.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2018-1000873" name="pkg:maven/com.fasterxml.jackson.core/jackson-annotations@2.8.0"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)"/><system-out>Fasterxml Jackson version Before 2.9.8 contains a CWE-20: Improper Input Validation vulnerability in Jackson-Modules-Java8 that can result in Causes a denial-of-service (DoS). This attack appear to be exploitable via The victim deserializes malicious input, specifically very large values in the nanoseconds field of a time value. This vulnerability appears to have been fixed in 2.9.8.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="3" errors="0" time="0" id="56" name="/home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.8.6/jackson-core-2.8.6.jar" package="jackson-core-2.8.6.jar" skipped="0" tests="3" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-45688" name="pkg:maven/com.fasterxml.jackson.core/jackson-core@2.8.6"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>A stack overflow in the XML.toJSONObject component of hutool-json v5.8.10 allows attackers to cause a Denial of Service (DoS) via crafted JSON or XML data.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.8.6/jackson-core-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-5072" name="pkg:maven/com.fasterxml.jackson.core/jackson-core@2.8.6"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Denial of Service  in JSON-Java versions up to and including 20230618.  A bug in the parser means that an input string of modest size can lead to indefinite amounts of memory being used. 
</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.8.6/jackson-core-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1000873" name="pkg:maven/com.fasterxml.jackson.core/jackson-core@2.8.6"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)"/><system-out>Fasterxml Jackson version Before 2.9.8 contains a CWE-20: Improper Input Validation vulnerability in Jackson-Modules-Java8 that can result in Causes a denial-of-service (DoS). This attack appear to be exploitable via The victim deserializes malicious input, specifically very large values in the nanoseconds field of a time value. This vulnerability appears to have been fixed in 2.9.8.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.8.6/jackson-core-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="57" errors="0" time="0" id="57" name="/home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar" package="jackson-databind-2.8.6.jar" skipped="0" tests="57" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2018-14721" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 10.0 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.7 might allow remote attackers to conduct server-side request forgery (SSRF) attacks by leveraging failure to block the axis2-jaxws class from polymorphic deserialization.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2017-15095" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A deserialization flaw was discovered in the jackson-databind in versions before 2.8.10 and 2.9.1, which could allow an unauthenticated user to perform code execution by sending the maliciously crafted input to the readValue method of the ObjectMapper. This issue extends the previous flaw CVE-2017-7525 by blacklisting more classes that could be used maliciously.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2017-17485" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind through 2.8.10 and 2.9.x through 2.9.3 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the Spring libraries are available in the classpath.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2017-7525" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A deserialization flaw was discovered in the jackson-databind, versions before 2.6.7.1, 2.7.9.1 and 2.8.9, which could allow an unauthenticated user to perform code execution by sending the maliciously crafted input to the readValue method of the ObjectMapper.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-11307" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>An issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.5. Use of Jackson default typing along with a gadget class from iBatis allows exfiltration of content. Fixed in 2.7.9.4, 2.8.11.2, and 2.9.6.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-14718" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.7 might allow remote attackers to execute arbitrary code by leveraging failure to block the slf4j-ext class from polymorphic deserialization.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-14719" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.7 might allow remote attackers to execute arbitrary code by leveraging failure to block the blaze-ds-opt and blaze-ds-core classes from polymorphic deserialization.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-14720" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.7 might allow attackers to conduct external XML entity (XXE) attacks by leveraging failure to block unspecified JDK classes from polymorphic deserialization.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-19360" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.8 might allow attackers to have unspecified impact by leveraging failure to block the axis2-transport-jms class from polymorphic deserialization.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-19361" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.8 might allow attackers to have unspecified impact by leveraging failure to block the openjpa class from polymorphic deserialization.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-19362" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.8 might allow attackers to have unspecified impact by leveraging failure to block the jboss-common-core class from polymorphic deserialization.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-7489" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind before 2.7.9.3, 2.8.x before 2.8.11.1 and 2.9.x before 2.9.5 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the c3p0 libraries are available in the classpath.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-14379" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>SubTypeValidator.java in FasterXML jackson-databind before 2.9.9.2 mishandles default typing when ehcache is used (because of net.sf.ehcache.transaction.manager.DefaultTransactionManagerLookup), leading to remote code execution.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-14540" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to com.zaxxer.hikari.HikariConfig.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-14892" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A flaw was discovered in jackson-databind in versions before 2.9.10, 2.8.11.5 and 2.6.7.3, where it would permit polymorphic deserialization of a malicious object using commons-configuration 1 and 2 JNDI classes. An attacker could use this flaw to execute arbitrary code.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-14893" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A flaw was discovered in FasterXML jackson-databind in all versions before 2.9.10 and 2.10.0, where it would permit polymorphic deserialization of malicious objects using the xalan JNDI gadget when used in conjunction with polymorphic type handling methods such as `enableDefaultTyping()` or when @JsonTypeInfo is using `Id.CLASS` or `Id.MINIMAL_CLASS` or in any other way which ObjectMapper.readValue might instantiate objects from unsafe sources. An attacker could use this flaw to execute arbitrary code.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-16335" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to com.zaxxer.hikari.HikariDataSource. This is a different vulnerability than CVE-2019-14540.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-16942" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the commons-dbcp (1.4) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of org.apache.commons.dbcp.datasources.SharedPoolDataSource and org.apache.commons.dbcp.datasources.PerUserPoolDataSource mishandling.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-16943" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the p6spy (3.8.6) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of com.p6spy.engine.spy.P6DataSource mishandling.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-17267" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-17531" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the apache-log4j-extra (version 1.2.x) jar in the classpath, and an attacker can provide a JNDI service to access, it is possible to make the service execute a malicious payload.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-20330" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.2 lacks certain net.sf.ehcache blocking.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-8840" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.0.0 through 2.9.10.2 lacks certain xbean-reflect/JNDI blocking, as demonstrated by org.apache.xbean.propertyeditor.JndiConverter.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-9546" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig (aka shaded hikari-config).</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-9547" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig (aka ibatis-sqlmap).</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-9548" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPConfig (aka anteros-core).</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-10969" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to javax.swing.JEditorPane.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-5968" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind through 2.8.11 and 2.9.x through 2.9.3 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 and CVE-2017-17485 deserialization flaws. This is exploitable via two different gadgets that bypass a blacklist.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-10650" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A deserialization flaw was discovered in jackson-databind through 2.9.10.4. It could allow an unauthenticated user to perform code execution via ignite-jta or quartz-core: org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup, org.apache.ignite.cache.jta.jndi.CacheJndiTmFactory, and org.quartz.utils.JNDIConnectionProvider.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-24616" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPDataSource (aka Anteros-DBCP).</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-24750" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to com.pastdev.httpcomponents.configuration.JndiConfiguration.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-35490" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.PerUserPoolDataSource.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-35491" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.SharedPoolDataSource.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36179" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to oadd.org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36180" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36181" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36182" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36183" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.docx4j.org.apache.xalan.lib.sql.JNDIConnectionPool.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36184" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36185" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.datasources.SharedPoolDataSource.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36186" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36187" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36188" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36189" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to com.newrelic.agent.deps.ch.qos.logback.core.db.DriverManagerConnectionSource.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-20190" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A flaw was found in jackson-databind before 2.9.10.7. FasterXML mishandles the interaction between serialization gadgets and typing. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-12022" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H)"/><system-out>An issue was discovered in FasterXML jackson-databind prior to 2.7.9.4, 2.8.11.2, and 2.9.6. When Default Typing is enabled (either globally or for a specific property), the service has the Jodd-db jar (for database access for the Jodd framework) in the classpath, and an attacker can provide an LDAP service to access, it is possible to make the service execute a malicious payload.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-12023" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H)"/><system-out>An issue was discovered in FasterXML jackson-databind prior to 2.7.9.4, 2.8.11.2, and 2.9.6. When Default Typing is enabled (either globally or for a specific property), the service has the Oracle JDBC jar in the classpath, and an attacker can provide an LDAP service to access, it is possible to make the service execute a malicious payload.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-12086" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x before 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint, the service has the mysql-connector-java jar (8.0.14 or earlier) in the classpath, and an attacker can host a crafted MySQL server reachable by the victim, an attacker can send a crafted JSON message that allows them to read arbitrary local files on the server. This occurs because of missing com.mysql.cj.jdbc.admin.MiniAdmin validation.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-14439" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x before 2.9.9.2. This occurs when Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the logback jar in the classpath.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-25649" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV2: HIGH, score: 7.5 (/AV:N/AC:L/Au:/C:N/I:H/A:N)"/><system-out>A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-36518" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-42003" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In FasterXML jackson-databind before 2.14.0-rc1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled. Additional fix version in 2.13.4.1 and 2.12.17.1</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-42004" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1000873" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)"/><system-out>Fasterxml Jackson version Before 2.9.8 contains a CWE-20: Improper Input Validation vulnerability in Jackson-Modules-Java8 that can result in Causes a denial-of-service (DoS). This attack appear to be exploitable via The victim deserializes malicious input, specifically very large values in the nanoseconds field of a time value. This vulnerability appears to have been fixed in 2.9.8.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-12384" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>FasterXML jackson-databind 2.x before 2.9.9.1 might allow attackers to have a variety of impacts by leveraging failure to block the logback-core class from polymorphic deserialization. Depending on the classpath content, remote code execution may be possible.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-12814" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x through 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has JDOM 1.x or 2.x jar in the classpath, an attacker can send a specifically crafted JSON message that allows them to read arbitrary local files on the server.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-35116" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.8.6"><failure message="cvssV3: MEDIUM, score: 4.7 (CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor&apos;s perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker.</system-out><system-err>location: /home/khannasa/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="58" name="/home/khannasa/.m2/repository/edu/princeton/cup/java-cup/10k/java-cup-10k.jar" package="java-cup-10k.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="java-cup-10k.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="59" name="/home/khannasa/.m2/repository/com/auth0/java-jwt/4.0.0/java-jwt-4.0.0.jar" package="java-jwt-4.0.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="java-jwt-4.0.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="60" name="/home/khannasa/.m2/repository/com/fasterxml/uuid/java-uuid-generator/3.1.4/java-uuid-generator-3.1.4.jar" package="java-uuid-generator-3.1.4.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="java-uuid-generator-3.1.4.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="61" name="/home/khannasa/.m2/repository/org/javassist/javassist/3.27.0-GA/javassist-3.27.0-GA.jar" package="javassist-3.27.0-GA.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="javassist-3.27.0-GA.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="62" name="/home/khannasa/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar" package="javax.inject-1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="javax.inject-1.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="63" name="/home/khannasa/.m2/repository/jaxen/jaxen/1.1.6/jaxen-1.1.6.jar" package="jaxen-1.1.6.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="jaxen-1.1.6.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="64" name="/home/khannasa/.m2/repository/org/jboss/logging/jboss-logging/3.3.0.Final/jboss-logging-3.3.0.Final.jar" package="jboss-logging-3.3.0.Final.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="jboss-logging-3.3.0.Final.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="65" name="/home/khannasa/.m2/repository/com/ibm/db2/jcc/11.5.8.0/jcc-11.5.8.0.jar" package="jcc-11.5.8.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="jcc-11.5.8.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="66" name="/home/khannasa/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.22/jcl-over-slf4j-1.7.22.jar" package="jcl-over-slf4j-1.7.22.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="jcl-over-slf4j-1.7.22.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="67" name="/home/khannasa/.m2/repository/org/jdom/jdom2/2.0.6/jdom2-2.0.6.jar" package="jdom2-2.0.6.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2021-33813" name="pkg:maven/org.jdom/jdom2@2.0.6"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>An XXE issue in SAXBuilder in JDOM through 2.0.6 allows attackers to cause a denial of service via a crafted HTTP request.</system-out><system-err>location: /home/khannasa/.m2/repository/org/jdom/jdom2/2.0.6/jdom2-2.0.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="68" name="/home/khannasa/.m2/repository/com/sun/jersey/jersey-core/1.19.1/jersey-core-1.19.1.jar" package="jersey-core-1.19.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="jersey-core-1.19.1.jar"/></testsuite><testsuite failures="5" errors="0" time="0" id="69" name="/home/khannasa/.m2/repository/org/codehaus/jettison/jettison/1.3.7/jettison-1.3.7.jar" package="jettison-1.3.7.jar" skipped="0" tests="5" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-40149" name="pkg:maven/org.codehaus.jettison/jettison@1.3.7"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Those using Jettison to parse untrusted XML or JSON data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/codehaus/jettison/jettison/1.3.7/jettison-1.3.7.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2022-40150" name="pkg:maven/org.codehaus.jettison/jettison@1.3.7"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Those using Jettison to parse untrusted XML or JSON data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by Out of memory. This effect may support a denial of service attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/codehaus/jettison/jettison/1.3.7/jettison-1.3.7.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2022-45685" name="pkg:maven/org.codehaus.jettison/jettison@1.3.7"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>A stack overflow in Jettison before v1.5.2 allows attackers to cause a Denial of Service (DoS) via crafted JSON data.</system-out><system-err>location: /home/khannasa/.m2/repository/org/codehaus/jettison/jettison/1.3.7/jettison-1.3.7.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2022-45693" name="pkg:maven/org.codehaus.jettison/jettison@1.3.7"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Jettison before v1.5.2 was discovered to contain a stack overflow via the map parameter. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted string.</system-out><system-err>location: /home/khannasa/.m2/repository/org/codehaus/jettison/jettison/1.3.7/jettison-1.3.7.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2023-1436" name="pkg:maven/org.codehaus.jettison/jettison@1.3.7"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>An infinite recursion is triggered in Jettison when constructing a JSONArray from a Collection that contains a self-reference in one of its elements. This leads to a StackOverflowError exception being thrown.

</system-out><system-err>location: /home/khannasa/.m2/repository/org/codehaus/jettison/jettison/1.3.7/jettison-1.3.7.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="70" name="/home/khannasa/.m2/repository/io/jsonwebtoken/jjwt/0.9.1/jjwt-0.9.1.jar" package="jjwt-0.9.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="jjwt-0.9.1.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="71" name="/home/khannasa/.m2/repository/joda-time/joda-time/2.9.7/joda-time-2.9.7.jar" package="joda-time-2.9.7.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="joda-time-2.9.7.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="72" name="/home/khannasa/.m2/repository/org/jolokia/jolokia-core/1.6.0/jolokia-core-1.6.0.jar" package="jolokia-core-1.6.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2018-10899" name="pkg:maven/org.jolokia/jolokia-core@1.6.0"><failure message="cvssV3: HIGH, score: 8.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H)"/><system-out>A flaw was found in Jolokia versions from 1.2 to before 1.6.1. Affected versions are vulnerable to a system-wide CSRF. This holds true for properly configured instances with strict checking for origin and referrer headers. This could result in a Remote Code Execution attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/jolokia/jolokia-core/1.6.0/jolokia-core-1.6.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="2" errors="0" time="0" id="73" name="/home/khannasa/.m2/repository/com/jayway/jsonpath/json-path/2.2.0/json-path-2.2.0.jar" package="json-path-2.2.0.jar" skipped="0" tests="2" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-45688" name="pkg:maven/com.jayway.jsonpath/json-path@2.2.0"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>A stack overflow in the XML.toJSONObject component of hutool-json v5.8.10 allows attackers to cause a Denial of Service (DoS) via crafted JSON or XML data.</system-out><system-err>location: /home/khannasa/.m2/repository/com/jayway/jsonpath/json-path/2.2.0/json-path-2.2.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-5072" name="pkg:maven/com.jayway.jsonpath/json-path@2.2.0"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Denial of Service  in JSON-Java versions up to and including 20230618.  A bug in the parser means that an input string of modest size can lead to indefinite amounts of memory being used. 
</system-out><system-err>location: /home/khannasa/.m2/repository/com/jayway/jsonpath/json-path/2.2.0/json-path-2.2.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="74" name="/home/khannasa/.m2/repository/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar" package="json-simple-1.1.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="json-simple-1.1.1.jar"/></testsuite><testsuite failures="3" errors="0" time="0" id="75" name="/home/khannasa/.m2/repository/net/minidev/json-smart/2.2.1/json-smart-2.2.1.jar" package="json-smart-2.2.1.jar" skipped="0" tests="3" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2021-31684" name="pkg:maven/net.minidev/json-smart@2.2.1"><failure message="cvssV2: HIGH, score: 7.5 (/AV:N/AC:L/Au:/C:N/I:N/A:H)"/><system-out>A vulnerability was discovered in the indexOf function of JSONParserByteArray in JSON Smart versions 1.3 and 2.4 which causes a denial of service (DOS) via a crafted web request.</system-out><system-err>location: /home/khannasa/.m2/repository/net/minidev/json-smart/2.2.1/json-smart-2.2.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-1370" name="pkg:maven/net.minidev/json-smart@2.2.1"><failure message="cvssV2: HIGH, score: 7.5 (/AV:N/AC:L/Au:/C:N/I:N/A:H)"/><system-out>[Json-smart](https://netplex.github.io/json-smart/) is a performance focused, JSON processor lib.

When reaching a ‘[‘ or ‘{‘ character in the JSON input, the code parses an array or an object respectively.

It was discovered that the code does not have any limit to the nesting of such arrays or objects. Since the parsing of nested arrays and objects is done recursively, nesting too many of them can cause a stack exhaustion (stack overflow) and crash the software.

</system-out><system-err>location: /home/khannasa/.m2/repository/net/minidev/json-smart/2.2.1/json-smart-2.2.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-27568" name="pkg:maven/net.minidev/json-smart@2.2.1"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>An issue was discovered in netplex json-smart-v1 through 2015-10-23 and json-smart-v2 through 2.4. An exception is thrown from a function, but it is not caught, as demonstrated by NumberFormatException. When it is not caught, it may cause programs using the library to crash or expose sensitive information.</system-out><system-err>location: /home/khannasa/.m2/repository/net/minidev/json-smart/2.2.1/json-smart-2.2.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="2" errors="0" time="0" id="76" name="/home/khannasa/.m2/repository/org/jsoup/jsoup/1.10.2/jsoup-1.10.2.jar" package="jsoup-1.10.2.jar" skipped="0" tests="2" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2021-37714" name="pkg:maven/org.jsoup/jsoup@1.10.2"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>jsoup is a Java library for working with HTML. Those using jsoup versions prior to 1.14.2 to parse untrusted HTML or XML may be vulnerable to DOS attacks. If the parser is run on user supplied input, an attacker may supply content that causes the parser to get stuck (loop indefinitely until cancelled), to complete more slowly than usual, or to throw an unexpected exception. This effect may support a denial of service attack. The issue is patched in version 1.14.2. There are a few available workarounds. Users may rate limit input parsing, limit the size of inputs based on system resources, and/or implement thread watchdogs to cap and timeout parse runtimes.</system-out><system-err>location: /home/khannasa/.m2/repository/org/jsoup/jsoup/1.10.2/jsoup-1.10.2.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-36033" name="pkg:maven/org.jsoup/jsoup@1.10.2"><failure message="cvssV3: MEDIUM, score: 6.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N)"/><system-out>jsoup is a Java HTML parser, built for HTML editing, cleaning, scraping, and cross-site scripting (XSS) safety. jsoup may incorrectly sanitize HTML including `javascript:` URL expressions, which could allow XSS attacks when a reader subsequently clicks that link. If the non-default `SafeList.preserveRelativeLinks` option is enabled, HTML including `javascript:` URLs that have been crafted with control characters will not be sanitized. If the site that this HTML is published on does not set a Content Security Policy, an XSS attack is then possible. This issue is patched in jsoup 1.15.3. Users should upgrade to this version. Additionally, as the unsanitized input may have been persisted, old content should be cleaned again using the updated version. To remediate this issue without immediately upgrading: - disable `SafeList.preserveRelativeLinks`, which will rewrite input URLs as absolute URLs - ensure an appropriate [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) is defined. (This should be used regardless of upgrading, as a defence-in-depth best practice.)</system-out><system-err>location: /home/khannasa/.m2/repository/org/jsoup/jsoup/1.10.2/jsoup-1.10.2.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="77" name="/home/khannasa/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar" package="jsr305-1.3.9.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="jsr305-1.3.9.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="78" name="/home/khannasa/.m2/repository/javax/ws/rs/jsr311-api/1.1.1/jsr311-api-1.1.1.jar" package="jsr311-api-1.1.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="jsr311-api-1.1.1.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="79" name="/home/khannasa/.m2/repository/org/slf4j/jul-to-slf4j/1.7.22/jul-to-slf4j-1.7.22.jar" package="jul-to-slf4j-1.7.22.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="jul-to-slf4j-1.7.22.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="80" name="/home/khannasa/.m2/repository/junit/junit/4.12/junit-4.12.jar" package="junit-4.12.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-15250" name="pkg:maven/junit/junit@4.12"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N)"/><system-out>In JUnit4 from version 4.7 and before 4.13.1, the test rule TemporaryFolder contains a local information disclosure vulnerability. On Unix like systems, the system&apos;s temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability does not allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. This vulnerability impacts you if the JUnit tests write sensitive information, like API keys or passwords, into the temporary folder, and the JUnit tests execute in an environment where the OS has other untrusted users. Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. For Java 1.7 and higher users: this vulnerability is fixed in 4.13.1. For Java 1.6 and lower users: no patch is available, you must use the workaround below. If you are unable to patch, or are stuck running on Java 1.6, specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability. For more information, including an example of vulnerable code, see the referenced GitHub Security Advisory.</system-out><system-err>location: /home/khannasa/.m2/repository/junit/junit/4.12/junit-4.12.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="81" name="/home/khannasa/.m2/repository/org/apache/logging/log4j/log4j-api/2.9.1/log4j-api-2.9.1.jar" package="log4j-api-2.9.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-9488" name="pkg:maven/org.apache.logging.log4j/log4j-api@2.9.1"><failure message="cvssV3: LOW, score: 3.7 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender. Fixed in Apache Log4j 2.12.3 and 2.13.1</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/logging/log4j/log4j-api/2.9.1/log4j-api-2.9.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="5" errors="0" time="0" id="82" name="/home/khannasa/.m2/repository/org/apache/logging/log4j/log4j-core/2.9.1/log4j-core-2.9.1.jar" package="log4j-core-2.9.1.jar" skipped="0" tests="5" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2021-44228" name="pkg:maven/org.apache.logging.log4j/log4j-core@2.9.1"><failure message="cvssV3: CRITICAL, score: 10.0 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H)"/><system-out>Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/logging/log4j/log4j-core/2.9.1/log4j-core-2.9.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-45046" name="pkg:maven/org.apache.logging.log4j/log4j-core@2.9.1"><failure message="cvssV3: CRITICAL, score: 9.0 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H)"/><system-out>It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/logging/log4j/log4j-core/2.9.1/log4j-core-2.9.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-44832" name="pkg:maven/org.apache.logging.log4j/log4j-core@2.9.1"><failure message="cvssV3: MEDIUM, score: 6.6 (CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to a remote code execution (RCE) attack when a configuration uses a JDBC Appender with a JNDI LDAP data source URI when an attacker has control of the target LDAP server. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/logging/log4j/log4j-core/2.9.1/log4j-core-2.9.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-45105" name="pkg:maven/org.apache.logging.log4j/log4j-core@2.9.1"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3 and 2.3.1) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0, 2.12.3, and 2.3.1.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/logging/log4j/log4j-core/2.9.1/log4j-core-2.9.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-9488" name="pkg:maven/org.apache.logging.log4j/log4j-core@2.9.1"><failure message="cvssV3: LOW, score: 3.7 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender. Fixed in Apache Log4j 2.12.3 and 2.13.1</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/logging/log4j/log4j-core/2.9.1/log4j-core-2.9.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="83" name="/home/khannasa/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.22/log4j-over-slf4j-1.7.22.jar" package="log4j-over-slf4j-1.7.22.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="log4j-over-slf4j-1.7.22.jar"/></testsuite><testsuite failures="2" errors="0" time="0" id="84" name="/home/khannasa/.m2/repository/ch/qos/logback/logback-core/1.1.9/logback-core-1.1.9.jar" package="logback-core-1.1.9.jar" skipped="0" tests="2" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2017-5929" name="pkg:maven/ch.qos.logback/logback-core@1.1.9"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>QOS.ch Logback before 1.2.0 has a serialization vulnerability affecting the SocketServer and ServerSocketReceiver components.</system-out><system-err>location: /home/khannasa/.m2/repository/ch/qos/logback/logback-core/1.1.9/logback-core-1.1.9.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-42550" name="pkg:maven/ch.qos.logback/logback-core@1.1.9"><failure message="cvssV3: MEDIUM, score: 6.6 (CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In logback version 1.2.7 and prior versions, an attacker with the required privileges to edit configurations files could craft a malicious configuration allowing to execute arbitrary code loaded from LDAP servers.</system-out><system-err>location: /home/khannasa/.m2/repository/ch/qos/logback/logback-core/1.1.9/logback-core-1.1.9.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="85" name="/home/khannasa/.m2/repository/org/projectlombok/lombok/1.18.20/lombok-1.18.20.jar" package="lombok-1.18.20.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="lombok-1.18.20.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="86" name="/home/khannasa/.m2/repository/org/mapstruct/mapstruct/1.2.0.Final/mapstruct-1.2.0.Final.jar" package="mapstruct-1.2.0.Final.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="mapstruct-1.2.0.Final.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="87" name="/home/khannasa/.m2/repository/org/mybatis/mybatis/3.4.6/mybatis-3.4.6.jar/META-INF/maven/ognl/ognl/pom.xml" package="mybatis-3.4.6.jar (shaded: ognl:ognl:3.1.16)" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="mybatis-3.4.6.jar (shaded: ognl:ognl:3.1.16)"/></testsuite><testsuite failures="0" errors="0" time="0" id="88" name="/home/khannasa/.m2/repository/org/mybatis/mybatis/3.4.6/mybatis-3.4.6.jar/META-INF/maven/org.javassist/javassist/pom.xml" package="mybatis-3.4.6.jar (shaded: org.javassist:javassist:3.22.0-GA)" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="mybatis-3.4.6.jar (shaded: org.javassist:javassist:3.22.0-GA)"/></testsuite><testsuite failures="2" errors="0" time="0" id="89" name="/home/khannasa/.m2/repository/org/mybatis/mybatis/3.4.6/mybatis-3.4.6.jar" package="mybatis-3.4.6.jar" skipped="0" tests="2" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2023-25330" name="pkg:maven/org.mybatis/mybatis@3.4.6"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A SQL injection vulnerability in Mybatis plus below 3.5.3.1 allows remote attackers to execute arbitrary SQL commands via the tenant ID valuer.</system-out><system-err>location: /home/khannasa/.m2/repository/org/mybatis/mybatis/3.4.6/mybatis-3.4.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-26945" name="pkg:maven/org.mybatis/mybatis@3.4.6"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>MyBatis before 3.5.6 mishandles deserialization of object streams.</system-out><system-err>location: /home/khannasa/.m2/repository/org/mybatis/mybatis/3.4.6/mybatis-3.4.6.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="90" name="/home/khannasa/.m2/repository/org/mybatis/mybatis-spring/1.3.2/mybatis-spring-1.3.2.jar" package="mybatis-spring-1.3.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="mybatis-spring-1.3.2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="91" name="/home/khannasa/.m2/repository/org/mybatis/spring/boot/mybatis-spring-boot-autoconfigure/1.3.2/mybatis-spring-boot-autoconfigure-1.3.2.jar" package="mybatis-spring-boot-autoconfigure-1.3.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="mybatis-spring-boot-autoconfigure-1.3.2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="92" name="/home/khannasa/.m2/repository/org/mybatis/spring/boot/mybatis-spring-boot-starter/1.3.2/mybatis-spring-boot-starter-1.3.2.jar" package="mybatis-spring-boot-starter-1.3.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="mybatis-spring-boot-starter-1.3.2.jar"/></testsuite><testsuite failures="7" errors="0" time="0" id="93" name="/home/khannasa/.m2/repository/mysql/mysql-connector-java/8.0.12/mysql-connector-java-8.0.12.jar" package="mysql-connector-java-8.0.12.jar" skipped="0" tests="7" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2018-3258" name="pkg:maven/mysql/mysql-connector-java@8.0.12"><failure message="cvssV3: HIGH, score: 8.8 (CVSS:/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 8.0.12 and prior. Easily exploitable vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.8 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H).</system-out><system-err>location: /home/khannasa/.m2/repository/mysql/mysql-connector-java/8.0.12/mysql-connector-java-8.0.12.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-22102" name="pkg:maven/mysql/mysql-connector-java@8.0.12"><failure message="cvssV3: HIGH, score: 8.3 (CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H)"/><system-out>Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J).  Supported versions that are affected are 8.1.0 and prior. Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise MySQL Connectors.  Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in MySQL Connectors, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.1 Base Score 8.3 (Confidentiality, Integrity and Availability impacts).  CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H).</system-out><system-err>location: /home/khannasa/.m2/repository/mysql/mysql-connector-java/8.0.12/mysql-connector-java-8.0.12.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-21363" name="pkg:maven/mysql/mysql-connector-java@8.0.12"><failure message="cvssV2: MEDIUM, score: 6.6 (/AV:N/AC:H/Au:/C:H/I:H/A:H)"/><system-out>Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J). Supported versions that are affected are 8.0.27 and prior. Difficult to exploit vulnerability allows high privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.1 Base Score 6.6 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H).</system-out><system-err>location: /home/khannasa/.m2/repository/mysql/mysql-connector-java/8.0.12/mysql-connector-java-8.0.12.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-2692" name="pkg:maven/mysql/mysql-connector-java@8.0.12"><failure message="cvssV3: MEDIUM, score: 6.3 (CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:H)"/><system-out>Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 8.0.15 and prior. Difficult to exploit vulnerability allows high privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 6.3 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:H).</system-out><system-err>location: /home/khannasa/.m2/repository/mysql/mysql-connector-java/8.0.12/mysql-connector-java-8.0.12.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-2471" name="pkg:maven/mysql/mysql-connector-java@8.0.12"><failure message="cvssV2: MEDIUM, score: 5.9 (/AV:N/AC:H/Au:/C:H/I:N/A:H)"/><system-out>Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J). Supported versions that are affected are 8.0.26 and prior. Difficult to exploit vulnerability allows high privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized access to critical data or complete access to all MySQL Connectors accessible data and unauthorized ability to cause a hang or frequently repeatable crash (complete DOS) of MySQL Connectors. CVSS 3.1 Base Score 5.9 (Confidentiality and Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:N/A:H).</system-out><system-err>location: /home/khannasa/.m2/repository/mysql/mysql-connector-java/8.0.12/mysql-connector-java-8.0.12.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-2934" name="pkg:maven/mysql/mysql-connector-java@8.0.12"><failure message="cvssV3: MEDIUM, score: 5.0 (CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L)"/><system-out>Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J). Supported versions that are affected are 8.0.19 and prior and 5.1.48 and prior. Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data as well as unauthorized read access to a subset of MySQL Connectors accessible data and unauthorized ability to cause a partial denial of service (partial DOS) of MySQL Connectors. CVSS 3.0 Base Score 5.0 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L).</system-out><system-err>location: /home/khannasa/.m2/repository/mysql/mysql-connector-java/8.0.12/mysql-connector-java-8.0.12.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-2875" name="pkg:maven/mysql/mysql-connector-java@8.0.12"><failure message="cvssV3: MEDIUM, score: 4.7 (CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N)"/><system-out>Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J). Supported versions that are affected are 8.0.14 and prior and 5.1.48 and prior. Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data as well as unauthorized read access to a subset of MySQL Connectors accessible data. CVSS 3.0 Base Score 4.7 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N).</system-out><system-err>location: /home/khannasa/.m2/repository/mysql/mysql-connector-java/8.0.12/mysql-connector-java-8.0.12.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="94" name="/home/khannasa/.m2/repository/com/netflix/netflix-commons/netflix-commons-util/0.1.1/netflix-commons-util-0.1.1.jar" package="netflix-commons-util-0.1.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="netflix-commons-util-0.1.1.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="95" name="/home/khannasa/.m2/repository/com/netflix/netflix-commons/netflix-eventbus/0.3.0/netflix-eventbus-0.3.0.jar" package="netflix-eventbus-0.3.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="netflix-eventbus-0.3.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="96" name="/home/khannasa/.m2/repository/com/netflix/netflix-commons/netflix-infix/0.3.0/netflix-infix-0.3.0.jar" package="netflix-infix-0.3.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="netflix-infix-0.3.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="97" name="/home/khannasa/.m2/repository/com/netflix/netflix-commons/netflix-statistics/0.1.1/netflix-statistics-0.1.1.jar" package="netflix-statistics-0.1.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="netflix-statistics-0.1.1.jar"/></testsuite><testsuite failures="16" errors="0" time="0" id="98" name="/home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar" package="netty-codec-4.0.27.Final.jar" skipped="0" tests="16" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2019-20444" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: CRITICAL, score: 9.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N)"/><system-out>HttpObjectDecoder.java in Netty before 4.1.44 allows an HTTP header that lacks a colon, which might be interpreted as a separate header with an incorrect syntax, or might be interpreted as an &quot;invalid fold.&quot;</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2019-20445" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: CRITICAL, score: 9.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N)"/><system-out>HttpObjectDecoder.java in Netty before 4.1.44 allows a Content-Length header to be accompanied by a second Content-Length header, or by a Transfer-Encoding header.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2015-2156" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Netty before 3.9.8.Final, 3.10.x before 3.10.3.Final, 4.0.x before 4.0.28.Final, and 4.1.x before 4.1.0.Beta5 and Play Framework 2.x before 2.3.9 might allow remote attackers to bypass the httpOnly flag on cookies and obtain sensitive information by leveraging improper validation of cookie name and value characters.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2016-4970" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>handler/ssl/OpenSslEngine.java in Netty 4.0.x before 4.0.37.Final and 4.1.x before 4.1.1.Final allows remote attackers to cause a denial of service (infinite loop).</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2019-16869" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Netty before 4.1.42.Final mishandles whitespace before the colon in HTTP headers (such as a &quot;Transfer-Encoding : chunked&quot; line), which leads to HTTP request smuggling.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2020-11612" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV2: HIGH, score: 7.5 (/AV:N/AC:L/Au:/C:N/I:N/A:H)"/><system-out> netty-codec - Denial of Service (DoS) via Memory Exhaustion [CVE-2020-11612]

The product allocates memory based on an untrusted size value, but it does not validate or incorrectly validates the size, allowing arbitrary amounts of memory to be allocated.

Sonatype&apos;s research suggests that this CVE&apos;s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2020-11612 for details</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-37136" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The Bzip2 decompression decoder function doesn&apos;t allow setting size restrictions on the decompressed output data (which affects the allocation size used during decompression). All users of Bzip2Decoder are affected. The malicious input can trigger an OOME and so a DoS attack</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-37137" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The Snappy frame decoder function doesn&apos;t restrict the chunk length which may lead to excessive memory usage. Beside this it also may buffer reserved skippable chunks until the whole chunk was received which may lead to excessive memory usage as well. This vulnerability can be triggered by supplying malicious input that decompresses to a very big size (via a network stream or a file) or by sending a huge skippable chunk.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2022-41881" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Netty project is an event-driven asynchronous network application framework. In versions prior to 4.1.86.Final, a StackOverflowError can be raised when parsing a malformed crafted message due to an infinite recursion. This issue is patched in version 4.1.86.Final. There is no workaround, except using a custom HaProxyMessageDecoder.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2023-44487" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-43797" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N)"/><system-out>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. Netty prior to version 4.1.71.Final skips control chars when they are present at the beginning / end of the header name. It should instead fail fast as these are not allowed by the spec and could lead to HTTP request smuggling. Failing to do the validation might cause netty to &quot;sanitize&quot; header names before it forward these to another remote system when used as proxy. This remote system can&apos;t see the invalid usage anymore, and therefore does not do the validation itself. Users should upgrade to version 4.1.71.Final.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2023-34462" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `SniHandler` can allocate up to 16MB of heap for each channel during the TLS handshake. When the handler or the channel does not have an idle timeout, it can be used to make a TCP server using the `SniHandler` to allocate 16MB of heap. The `SniHandler` class is a handler that waits for the TLS handshake to configure a `SslHandler` according to the indicated server name by the `ClientHello` record. For this matter it allocates a `ByteBuf` using the value defined in the `ClientHello` record. Normally the value of the packet should be smaller than the handshake packet but there are not checks done here and the way the code is written, it is possible to craft a packet that makes the `SslClientHelloHandler`. This vulnerability has been fixed in version 4.1.94.Final.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-21295" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel&apos;s pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-21409" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty (io.netty:netty-codec-http2) before version 4.1.61.Final there is a vulnerability that enables request smuggling. The content-length header is not correctly validated if the request only uses a single Http2HeaderFrame with the endStream set to to true. This could lead to request smuggling if the request is proxied to a remote peer and translated to HTTP/1.1. This is a followup of GHSA-wm47-8v5p-wjpj/CVE-2021-21295 which did miss to fix this one case. This was fixed as part of 4.1.61.Final.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-21290" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty&apos;s multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method &quot;File.createTempFile&quot; on unix-like systems creates a random file, but, by default will create this file with the permissions &quot;-rw-r--r--&quot;. Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty&apos;s &quot;AbstractDiskHttpData&quot; is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own &quot;java.io.tmpdir&quot; when you start the JVM or use &quot;DefaultHttpDataFactory.setBaseDir(...)&quot; to set the directory to something that is only readable by the current user.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2022-24823" name="pkg:maven/io.netty/netty-codec@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty&apos;s multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one&apos;s own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-codec/4.0.27.Final/netty-codec-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase></testsuite><testsuite failures="16" errors="0" time="0" id="99" name="/home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar" package="netty-handler-4.0.27.Final.jar" skipped="0" tests="16" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2019-20444" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: CRITICAL, score: 9.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N)"/><system-out>HttpObjectDecoder.java in Netty before 4.1.44 allows an HTTP header that lacks a colon, which might be interpreted as a separate header with an incorrect syntax, or might be interpreted as an &quot;invalid fold.&quot;</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2019-20445" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: CRITICAL, score: 9.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N)"/><system-out>HttpObjectDecoder.java in Netty before 4.1.44 allows a Content-Length header to be accompanied by a second Content-Length header, or by a Transfer-Encoding header.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2015-2156" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Netty before 3.9.8.Final, 3.10.x before 3.10.3.Final, 4.0.x before 4.0.28.Final, and 4.1.x before 4.1.0.Beta5 and Play Framework 2.x before 2.3.9 might allow remote attackers to bypass the httpOnly flag on cookies and obtain sensitive information by leveraging improper validation of cookie name and value characters.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2016-4970" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>handler/ssl/OpenSslEngine.java in Netty 4.0.x before 4.0.37.Final and 4.1.x before 4.1.1.Final allows remote attackers to cause a denial of service (infinite loop).</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2019-16869" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Netty before 4.1.42.Final mishandles whitespace before the colon in HTTP headers (such as a &quot;Transfer-Encoding : chunked&quot; line), which leads to HTTP request smuggling.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-37136" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The Bzip2 decompression decoder function doesn&apos;t allow setting size restrictions on the decompressed output data (which affects the allocation size used during decompression). All users of Bzip2Decoder are affected. The malicious input can trigger an OOME and so a DoS attack</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-37137" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The Snappy frame decoder function doesn&apos;t restrict the chunk length which may lead to excessive memory usage. Beside this it also may buffer reserved skippable chunks until the whole chunk was received which may lead to excessive memory usage as well. This vulnerability can be triggered by supplying malicious input that decompresses to a very big size (via a network stream or a file) or by sending a huge skippable chunk.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2022-41881" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Netty project is an event-driven asynchronous network application framework. In versions prior to 4.1.86.Final, a StackOverflowError can be raised when parsing a malformed crafted message due to an infinite recursion. This issue is patched in version 4.1.86.Final. There is no workaround, except using a custom HaProxyMessageDecoder.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2023-44487" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-43797" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N)"/><system-out>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. Netty prior to version 4.1.71.Final skips control chars when they are present at the beginning / end of the header name. It should instead fail fast as these are not allowed by the spec and could lead to HTTP request smuggling. Failing to do the validation might cause netty to &quot;sanitize&quot; header names before it forward these to another remote system when used as proxy. This remote system can&apos;t see the invalid usage anymore, and therefore does not do the validation itself. Users should upgrade to version 4.1.71.Final.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2023-34462" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `SniHandler` can allocate up to 16MB of heap for each channel during the TLS handshake. When the handler or the channel does not have an idle timeout, it can be used to make a TCP server using the `SniHandler` to allocate 16MB of heap. The `SniHandler` class is a handler that waits for the TLS handshake to configure a `SslHandler` according to the indicated server name by the `ClientHello` record. For this matter it allocates a `ByteBuf` using the value defined in the `ClientHello` record. Normally the value of the packet should be smaller than the handshake packet but there are not checks done here and the way the code is written, it is possible to craft a packet that makes the `SslClientHelloHandler`. This vulnerability has been fixed in version 4.1.94.Final.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2023-4586" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV2: MEDIUM, score: 6.5 (/AV:N/AC:H/Au:/C:H/I:L/A:N)"/><system-out>netty-handler - Improper Certificate Validation

The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-21295" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel&apos;s pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-21409" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty (io.netty:netty-codec-http2) before version 4.1.61.Final there is a vulnerability that enables request smuggling. The content-length header is not correctly validated if the request only uses a single Http2HeaderFrame with the endStream set to to true. This could lead to request smuggling if the request is proxied to a remote peer and translated to HTTP/1.1. This is a followup of GHSA-wm47-8v5p-wjpj/CVE-2021-21295 which did miss to fix this one case. This was fixed as part of 4.1.61.Final.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-21290" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty&apos;s multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method &quot;File.createTempFile&quot; on unix-like systems creates a random file, but, by default will create this file with the permissions &quot;-rw-r--r--&quot;. Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty&apos;s &quot;AbstractDiskHttpData&quot; is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own &quot;java.io.tmpdir&quot; when you start the JVM or use &quot;DefaultHttpDataFactory.setBaseDir(...)&quot; to set the directory to something that is only readable by the current user.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2022-24823" name="pkg:maven/io.netty/netty-handler@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty&apos;s multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one&apos;s own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-handler/4.0.27.Final/netty-handler-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase></testsuite><testsuite failures="15" errors="0" time="0" id="100" name="/home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar" package="netty-transport-4.0.27.Final.jar" skipped="0" tests="15" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2019-20444" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: CRITICAL, score: 9.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N)"/><system-out>HttpObjectDecoder.java in Netty before 4.1.44 allows an HTTP header that lacks a colon, which might be interpreted as a separate header with an incorrect syntax, or might be interpreted as an &quot;invalid fold.&quot;</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2019-20445" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: CRITICAL, score: 9.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N)"/><system-out>HttpObjectDecoder.java in Netty before 4.1.44 allows a Content-Length header to be accompanied by a second Content-Length header, or by a Transfer-Encoding header.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2015-2156" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Netty before 3.9.8.Final, 3.10.x before 3.10.3.Final, 4.0.x before 4.0.28.Final, and 4.1.x before 4.1.0.Beta5 and Play Framework 2.x before 2.3.9 might allow remote attackers to bypass the httpOnly flag on cookies and obtain sensitive information by leveraging improper validation of cookie name and value characters.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2016-4970" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>handler/ssl/OpenSslEngine.java in Netty 4.0.x before 4.0.37.Final and 4.1.x before 4.1.1.Final allows remote attackers to cause a denial of service (infinite loop).</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2019-16869" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Netty before 4.1.42.Final mishandles whitespace before the colon in HTTP headers (such as a &quot;Transfer-Encoding : chunked&quot; line), which leads to HTTP request smuggling.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-37136" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The Bzip2 decompression decoder function doesn&apos;t allow setting size restrictions on the decompressed output data (which affects the allocation size used during decompression). All users of Bzip2Decoder are affected. The malicious input can trigger an OOME and so a DoS attack</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-37137" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The Snappy frame decoder function doesn&apos;t restrict the chunk length which may lead to excessive memory usage. Beside this it also may buffer reserved skippable chunks until the whole chunk was received which may lead to excessive memory usage as well. This vulnerability can be triggered by supplying malicious input that decompresses to a very big size (via a network stream or a file) or by sending a huge skippable chunk.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2022-41881" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Netty project is an event-driven asynchronous network application framework. In versions prior to 4.1.86.Final, a StackOverflowError can be raised when parsing a malformed crafted message due to an infinite recursion. This issue is patched in version 4.1.86.Final. There is no workaround, except using a custom HaProxyMessageDecoder.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2023-44487" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-43797" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N)"/><system-out>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. Netty prior to version 4.1.71.Final skips control chars when they are present at the beginning / end of the header name. It should instead fail fast as these are not allowed by the spec and could lead to HTTP request smuggling. Failing to do the validation might cause netty to &quot;sanitize&quot; header names before it forward these to another remote system when used as proxy. This remote system can&apos;t see the invalid usage anymore, and therefore does not do the validation itself. Users should upgrade to version 4.1.71.Final.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2023-34462" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `SniHandler` can allocate up to 16MB of heap for each channel during the TLS handshake. When the handler or the channel does not have an idle timeout, it can be used to make a TCP server using the `SniHandler` to allocate 16MB of heap. The `SniHandler` class is a handler that waits for the TLS handshake to configure a `SslHandler` according to the indicated server name by the `ClientHello` record. For this matter it allocates a `ByteBuf` using the value defined in the `ClientHello` record. Normally the value of the packet should be smaller than the handshake packet but there are not checks done here and the way the code is written, it is possible to craft a packet that makes the `SslClientHelloHandler`. This vulnerability has been fixed in version 4.1.94.Final.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-21295" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel&apos;s pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-21409" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty (io.netty:netty-codec-http2) before version 4.1.61.Final there is a vulnerability that enables request smuggling. The content-length header is not correctly validated if the request only uses a single Http2HeaderFrame with the endStream set to to true. This could lead to request smuggling if the request is proxied to a remote peer and translated to HTTP/1.1. This is a followup of GHSA-wm47-8v5p-wjpj/CVE-2021-21295 which did miss to fix this one case. This was fixed as part of 4.1.61.Final.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2021-21290" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty&apos;s multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method &quot;File.createTempFile&quot; on unix-like systems creates a random file, but, by default will create this file with the permissions &quot;-rw-r--r--&quot;. Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty&apos;s &quot;AbstractDiskHttpData&quot; is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own &quot;java.io.tmpdir&quot; when you start the JVM or use &quot;DefaultHttpDataFactory.setBaseDir(...)&quot; to set the directory to something that is only readable by the current user.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase><testcase classname="CVE-2022-24823" name="pkg:maven/io.netty/netty-transport@4.0.27.Final"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty&apos;s multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one&apos;s own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.</system-out><system-err>location: /home/khannasa/.m2/repository/io/netty/netty-transport/4.0.27.Final/netty-transport-4.0.27.Final.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="101" name="/home/khannasa/.m2/repository/ognl/ognl/3.0.8/ognl-3.0.8.jar" package="ognl-3.0.8.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2016-3093" name="pkg:maven/ognl/ognl@3.0.8"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L)"/><system-out>Apache Struts 2.0.0 through 2.3.24.1 does not properly cache method references when used with OGNL before 3.0.12, which allows remote attackers to cause a denial of service (block access to a web site) via unspecified vectors.</system-out><system-err>location: /home/khannasa/.m2/repository/ognl/ognl/3.0.8/ognl-3.0.8.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="3" errors="0" time="0" id="102" name="/home/khannasa/.m2/repository/com/squareup/okhttp/okhttp/2.5.0/okhttp-2.5.0.jar" package="okhttp-2.5.0.jar" skipped="0" tests="3" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2021-0341" name="pkg:maven/com.squareup.okhttp/okhttp@2.5.0"><failure message="cvssV2: HIGH, score: 7.5 (/AV:N/AC:L/Au:/C:H/I:N/A:N)"/><system-out>In verifyHostName of OkHostnameVerifier.java, there is a possible way to accept a certificate for the wrong domain due to improperly used crypto. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-8.1 Android-9 Android-10 Android-11Android ID: A-171980069</system-out><system-err>location: /home/khannasa/.m2/repository/com/squareup/okhttp/okhttp/2.5.0/okhttp-2.5.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-2402" name="pkg:maven/com.squareup.okhttp/okhttp@2.5.0"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>OkHttp before 2.7.4 and 3.x before 3.1.2 allows man-in-the-middle attackers to bypass certificate pinning by sending a certificate chain with a certificate from a non-pinned trusted CA and the pinned certificate.</system-out><system-err>location: /home/khannasa/.m2/repository/com/squareup/okhttp/okhttp/2.5.0/okhttp-2.5.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-0833" name="pkg:maven/com.squareup.okhttp/okhttp@2.5.0"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>A flaw was found in Red Hat&apos;s AMQ-Streams, which ships a version of the OKHttp component with an information disclosure flaw via an exception triggered by a header containing an illegal value. This issue could allow an authenticated attacker to access information outside of their regular permissions.</system-out><system-err>location: /home/khannasa/.m2/repository/com/squareup/okhttp/okhttp/2.5.0/okhttp-2.5.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="103" name="/home/khannasa/.m2/repository/com/squareup/okio/okio/1.6.0/okio-1.6.0.jar" package="okio-1.6.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2023-3635" name="pkg:maven/com.squareup.okio/okio@1.6.0"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>GzipSource does not handle an exception that might be raised when parsing a malformed gzip buffer. This may lead to denial of service of the Okio client when handling a crafted GZIP archive, by using the GzipSource class.

</system-out><system-err>location: /home/khannasa/.m2/repository/com/squareup/okio/okio/1.6.0/okio-1.6.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="104" name="/home/khannasa/.m2/repository/com/rackspace/eclipse/webtools/sourceediting/org.eclipse.wst.xml.xpath2.processor/2.1.100/org.eclipse.wst.xml.xpath2.processor-2.1.100.jar" package="org.eclipse.wst.xml.xpath2.processor-2.1.100.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="org.eclipse.wst.xml.xpath2.processor-2.1.100.jar"/></testsuite><testsuite failures="8" errors="0" time="0" id="105" name="/home/khannasa/.m2/repository/org/apache/poi/poi/3.10-FINAL/poi-3.10-FINAL.jar" package="poi-3.10-FINAL.jar" skipped="0" tests="8" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2017-12626" name="pkg:maven/org.apache.poi/poi@3.10-FINAL"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Apache POI in versions prior to release 3.17 are vulnerable to Denial of Service Attacks: 1) Infinite Loops while parsing crafted WMF, EMF, MSG and macros (POI bugs 61338 and 61294), and 2) Out of Memory Exceptions while parsing crafted DOC, PPT and XLS (POI bugs 52372 and 61295).</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi/3.10-FINAL/poi-3.10-FINAL.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-5000" name="pkg:maven/org.apache.poi/poi@3.10-FINAL"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N)"/><system-out>The XLSX2CSV example in Apache POI before 3.14 allows remote attackers to read arbitrary files via a crafted OpenXML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi/3.10-FINAL/poi-3.10-FINAL.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2017-5644" name="pkg:maven/org.apache.poi/poi@3.10-FINAL"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)"/><system-out>Apache POI in versions prior to release 3.15 allows remote attackers to cause a denial of service (CPU consumption) via a specially crafted OOXML file, aka an XML Entity Expansion (XEE) attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi/3.10-FINAL/poi-3.10-FINAL.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-12415" name="pkg:maven/org.apache.poi/poi@3.10-FINAL"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>In Apache POI up to 4.1.0, when using the tool XSSFExportToXml to convert user-provided Microsoft Excel documents, a specially crafted document can allow an attacker to read files from the local filesystem or from internal network resources via XML External Entity (XXE) Processing.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi/3.10-FINAL/poi-3.10-FINAL.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-26336" name="pkg:maven/org.apache.poi/poi@3.10-FINAL"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)"/><system-out>A shortcoming in the HMEF package of poi-scratchpad (Apache POI) allows an attacker to cause an Out of Memory exception. This package is used to read TNEF files (Microsoft Outlook and Microsoft Exchange Server). If an application uses poi-scratchpad to parse TNEF files and the application allows untrusted users to supply them, then a carefully crafted file can cause an Out of Memory exception. This issue affects poi-scratchpad version 5.2.0 and prior versions. Users are recommended to upgrade to poi-scratchpad 5.2.1.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi/3.10-FINAL/poi-3.10-FINAL.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2014-9527" name="pkg:maven/org.apache.poi/poi@3.10-FINAL"><failure message="cvssV2: MEDIUM, score: 5.0 (/AV:N/AC:L/Au:N/C:N/I:N/A:P)"/><system-out>HSLFSlideShow in Apache POI before 3.11 allows remote attackers to cause a denial of service (infinite loop and deadlock) via a crafted PPT file.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi/3.10-FINAL/poi-3.10-FINAL.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2014-3529" name="pkg:maven/org.apache.poi/poi@3.10-FINAL"><failure message="cvssV2: MEDIUM, score: 4.3 (/AV:N/AC:M/Au:N/C:P/I:N/A:N)"/><system-out>The OPC SAX setup in Apache POI before 3.10.1 allows remote attackers to read arbitrary files via an OpenXML file containing an XML external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi/3.10-FINAL/poi-3.10-FINAL.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2014-3574" name="pkg:maven/org.apache.poi/poi@3.10-FINAL"><failure message="cvssV2: MEDIUM, score: 4.3 (/AV:N/AC:M/Au:N/C:N/I:N/A:P)"/><system-out>Apache POI before 3.10.1 and 3.11.x before 3.11-beta2 allows remote attackers to cause a denial of service (CPU consumption and crash) via a crafted OOXML file, aka an XML Entity Expansion (XEE) attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi/3.10-FINAL/poi-3.10-FINAL.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="8" errors="0" time="0" id="106" name="/home/khannasa/.m2/repository/org/apache/poi/poi-ooxml/3.9/poi-ooxml-3.9.jar" package="poi-ooxml-3.9.jar" skipped="0" tests="8" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2017-12626" name="pkg:maven/org.apache.poi/poi-ooxml@3.9"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Apache POI in versions prior to release 3.17 are vulnerable to Denial of Service Attacks: 1) Infinite Loops while parsing crafted WMF, EMF, MSG and macros (POI bugs 61338 and 61294), and 2) Out of Memory Exceptions while parsing crafted DOC, PPT and XLS (POI bugs 52372 and 61295).</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi-ooxml/3.9/poi-ooxml-3.9.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2016-5000" name="pkg:maven/org.apache.poi/poi-ooxml@3.9"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N)"/><system-out>The XLSX2CSV example in Apache POI before 3.14 allows remote attackers to read arbitrary files via a crafted OpenXML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi-ooxml/3.9/poi-ooxml-3.9.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2017-5644" name="pkg:maven/org.apache.poi/poi-ooxml@3.9"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)"/><system-out>Apache POI in versions prior to release 3.15 allows remote attackers to cause a denial of service (CPU consumption) via a specially crafted OOXML file, aka an XML Entity Expansion (XEE) attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi-ooxml/3.9/poi-ooxml-3.9.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-12415" name="pkg:maven/org.apache.poi/poi-ooxml@3.9"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>In Apache POI up to 4.1.0, when using the tool XSSFExportToXml to convert user-provided Microsoft Excel documents, a specially crafted document can allow an attacker to read files from the local filesystem or from internal network resources via XML External Entity (XXE) Processing.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi-ooxml/3.9/poi-ooxml-3.9.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-26336" name="pkg:maven/org.apache.poi/poi-ooxml@3.9"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)"/><system-out>A shortcoming in the HMEF package of poi-scratchpad (Apache POI) allows an attacker to cause an Out of Memory exception. This package is used to read TNEF files (Microsoft Outlook and Microsoft Exchange Server). If an application uses poi-scratchpad to parse TNEF files and the application allows untrusted users to supply them, then a carefully crafted file can cause an Out of Memory exception. This issue affects poi-scratchpad version 5.2.0 and prior versions. Users are recommended to upgrade to poi-scratchpad 5.2.1.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi-ooxml/3.9/poi-ooxml-3.9.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2014-9527" name="pkg:maven/org.apache.poi/poi-ooxml@3.9"><failure message="cvssV2: MEDIUM, score: 5.0 (/AV:N/AC:L/Au:N/C:N/I:N/A:P)"/><system-out>HSLFSlideShow in Apache POI before 3.11 allows remote attackers to cause a denial of service (infinite loop and deadlock) via a crafted PPT file.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi-ooxml/3.9/poi-ooxml-3.9.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2014-3529" name="pkg:maven/org.apache.poi/poi-ooxml@3.9"><failure message="cvssV2: MEDIUM, score: 4.3 (/AV:N/AC:M/Au:N/C:P/I:N/A:N)"/><system-out>The OPC SAX setup in Apache POI before 3.10.1 allows remote attackers to read arbitrary files via an OpenXML file containing an XML external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi-ooxml/3.9/poi-ooxml-3.9.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2014-3574" name="pkg:maven/org.apache.poi/poi-ooxml@3.9"><failure message="cvssV2: MEDIUM, score: 4.3 (/AV:N/AC:M/Au:N/C:N/I:N/A:P)"/><system-out>Apache POI before 3.10.1 and 3.11.x before 3.11-beta2 allows remote attackers to cause a denial of service (CPU consumption and crash) via a crafted OOXML file, aka an XML Entity Expansion (XEE) attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/poi/poi-ooxml/3.9/poi-ooxml-3.9.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="4" errors="0" time="0" id="107" name="/home/khannasa/.m2/repository/org/postgresql/postgresql/42.3.1/postgresql-42.3.1.jar" package="postgresql-42.3.1.jar" skipped="0" tests="4" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-21724" name="pkg:maven/org.postgresql/postgresql@42.3.1"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>pgjdbc is the offical PostgreSQL JDBC Driver. A security hole was found in the jdbc driver for postgresql database while doing security research. The system using the postgresql library will be attacked when attacker control the jdbc url or properties. pgjdbc instantiates plugin instances based on class names provided via `authenticationPluginClassName`, `sslhostnameverifier`, `socketFactory`, `sslfactory`, `sslpasswordcallback` connection properties. However, the driver did not verify if the class implements the expected interface before instantiating the class. This can lead to code execution loaded via arbitrary classes. Users using plugins are advised to upgrade. There are no known workarounds for this issue.</system-out><system-err>location: /home/khannasa/.m2/repository/org/postgresql/postgresql/42.3.1/postgresql-42.3.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-26520" name="pkg:maven/org.postgresql/postgresql@42.3.1"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In pgjdbc before 42.3.3, an attacker (who controls the jdbc URL or properties) can call java.util.logging.FileHandler to write to arbitrary files through the loggerFile and loggerLevel connection properties. An example situation is that an attacker could create an executable JSP file under a Tomcat web root. NOTE: the vendor&apos;s position is that there is no pgjdbc vulnerability; instead, it is a vulnerability for any application to use the pgjdbc driver with untrusted connection properties</system-out><system-err>location: /home/khannasa/.m2/repository/org/postgresql/postgresql/42.3.1/postgresql-42.3.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-31197" name="pkg:maven/org.postgresql/postgresql@42.3.1"><failure message="cvssV3: HIGH, score: 8.0 (CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H)"/><system-out>PostgreSQL JDBC Driver (PgJDBC for short) allows Java programs to connect to a PostgreSQL database using standard, database independent Java code. The PGJDBC implementation of the `java.sql.ResultRow.refreshRow()` method is not performing escaping of column names so a malicious column name that contains a statement terminator, e.g. `;`, could lead to SQL injection. This could lead to executing additional SQL commands as the application&apos;s JDBC user. User applications that do not invoke the `ResultSet.refreshRow()` method are not impacted. User application that do invoke that method are impacted if the underlying database that they are querying via their JDBC application may be under the control of an attacker. The attack requires the attacker to trick the user into executing SQL against a table name who&apos;s column names would contain the malicious SQL and subsequently invoke the `refreshRow()` method on the ResultSet. Note that the application&apos;s JDBC user and the schema owner need not be the same. A JDBC application that executes as a privileged user querying database schemas owned by potentially malicious less-privileged users would be vulnerable. In that situation it may be possible for the malicious user to craft a schema that causes the application to execute commands as the privileged user. Patched versions will be released as `42.2.26` and `42.4.1`. Users are advised to upgrade. There are no known workarounds for this issue.</system-out><system-err>location: /home/khannasa/.m2/repository/org/postgresql/postgresql/42.3.1/postgresql-42.3.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-41946" name="pkg:maven/org.postgresql/postgresql@42.3.1"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>pgjdbc is an open source postgresql JDBC Driver. In affected versions a prepared statement using either `PreparedStatement.setText(int, InputStream)` or `PreparedStatemet.setBytea(int, InputStream)` will create a temporary file if the InputStream is larger than 2k. This will create a temporary file which is readable by other users on Unix like systems, but not MacOS. On Unix like systems, the system&apos;s temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability does not allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. Java 1.7 and higher users: this vulnerability is fixed in 4.5.0. Java 1.6 and lower users: no patch is available. If you are unable to patch, or are stuck running on Java 1.6, specifying the java.io.tmpdir system environment variable to a directory that is exclusively owned by the executing user will mitigate this vulnerability.</system-out><system-err>location: /home/khannasa/.m2/repository/org/postgresql/postgresql/42.3.1/postgresql-42.3.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="3" errors="0" time="0" id="108" name="/home/khannasa/.m2/repository/com/google/protobuf/protobuf-java/2.6.0/protobuf-java-2.6.0.jar" package="protobuf-java-2.6.0.jar" skipped="0" tests="3" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-3171" name="pkg:maven/com.google.protobuf/protobuf-java@2.6.0"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>A parsing issue with binary data in protobuf-java core and lite versions prior to 3.21.7, 3.20.3, 3.19.6 and 3.16.3 can lead to a denial of service attack. Inputs containing multiple instances of non-repeated embedded messages with repeated or unknown fields causes objects to be converted back-n-forth between mutable and immutable forms, resulting in potentially long garbage collection pauses. We recommend updating to the versions mentioned above.</system-out><system-err>location: /home/khannasa/.m2/repository/com/google/protobuf/protobuf-java/2.6.0/protobuf-java-2.6.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-3509" name="pkg:maven/com.google.protobuf/protobuf-java@2.6.0"><failure message="cvssV2: HIGH, score: 7.5 (/AV:N/AC:L/Au:/C:N/I:N/A:H)"/><system-out>A parsing issue similar to CVE-2022-3171, but with textformat in protobuf-java core and lite versions prior to 3.21.7, 3.20.3, 3.19.6 and 3.16.3 can lead to a denial of service attack. Inputs containing multiple instances of non-repeated embedded messages with repeated or unknown fields causes objects to be converted back-n-forth between mutable and immutable forms, resulting in potentially long garbage collection pauses. We recommend updating to the versions mentioned above.</system-out><system-err>location: /home/khannasa/.m2/repository/com/google/protobuf/protobuf-java/2.6.0/protobuf-java-2.6.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-22569" name="pkg:maven/com.google.protobuf/protobuf-java@2.6.0"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)"/><system-out>An issue in protobuf-java allowed the interleaving of com.google.protobuf.UnknownFieldSet fields in such a way that would be processed out of order. A small malicious payload can occupy the parser for several minutes by creating large numbers of short-lived objects that cause frequent, repeated pauses. We recommend upgrading libraries beyond the vulnerable versions.</system-out><system-err>location: /home/khannasa/.m2/repository/com/google/protobuf/protobuf-java/2.6.0/protobuf-java-2.6.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="109" name="/home/khannasa/.m2/repository/com/netflix/ribbon/ribbon/2.2.0/ribbon-2.2.0.jar" package="ribbon-2.2.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="ribbon-2.2.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="110" name="/home/khannasa/.m2/repository/com/netflix/ribbon/ribbon-core/2.2.0/ribbon-core-2.2.0.jar" package="ribbon-core-2.2.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="ribbon-core-2.2.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="111" name="/home/khannasa/.m2/repository/com/netflix/ribbon/ribbon-eureka/2.2.0/ribbon-eureka-2.2.0.jar" package="ribbon-eureka-2.2.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="ribbon-eureka-2.2.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="112" name="/home/khannasa/.m2/repository/com/netflix/ribbon/ribbon-httpclient/2.2.0/ribbon-httpclient-2.2.0.jar" package="ribbon-httpclient-2.2.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="ribbon-httpclient-2.2.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="113" name="/home/khannasa/.m2/repository/com/netflix/ribbon/ribbon-loadbalancer/2.2.0/ribbon-loadbalancer-2.2.0.jar" package="ribbon-loadbalancer-2.2.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="ribbon-loadbalancer-2.2.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="114" name="/home/khannasa/.m2/repository/com/netflix/ribbon/ribbon-transport/2.2.0/ribbon-transport-2.2.0.jar" package="ribbon-transport-2.2.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="ribbon-transport-2.2.0.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="115" name="/home/khannasa/.m2/repository/io/reactivex/rxjava/1.1.10/rxjava-1.1.10.jar" package="rxjava-1.1.10.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="rxjava-1.1.10.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="116" name="/home/khannasa/.m2/repository/io/reactivex/rxnetty/0.4.9/rxnetty-0.4.9.jar" package="rxnetty-0.4.9.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="rxnetty-0.4.9.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="117" name="/home/khannasa/.m2/repository/io/reactivex/rxnetty-contexts/0.4.9/rxnetty-contexts-0.4.9.jar" package="rxnetty-contexts-0.4.9.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="rxnetty-contexts-0.4.9.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="118" name="/home/khannasa/.m2/repository/io/reactivex/rxnetty-servo/0.4.9/rxnetty-servo-0.4.9.jar" package="rxnetty-servo-0.4.9.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="rxnetty-servo-0.4.9.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="119" name="/home/khannasa/.m2/repository/com/netflix/servo/servo-core/0.10.1/servo-core-0.10.1.jar" package="servo-core-0.10.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="servo-core-0.10.1.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="120" name="/home/khannasa/.m2/repository/com/netflix/servo/servo-internal/0.10.1/servo-internal-0.10.1.jar" package="servo-internal-0.10.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="servo-internal-0.10.1.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="121" name="/home/khannasa/.m2/repository/org/slf4j/slf4j-api/1.7.22/slf4j-api-1.7.22.jar" package="slf4j-api-1.7.22.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="slf4j-api-1.7.22.jar"/></testsuite><testsuite failures="8" errors="0" time="0" id="122" name="/home/khannasa/.m2/repository/org/yaml/snakeyaml/1.21/snakeyaml-1.21.jar" package="snakeyaml-1.21.jar" skipped="0" tests="8" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-1471" name="pkg:maven/org.yaml/snakeyaml@1.21"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>SnakeYaml&apos;s Constructor() class does not restrict types which can be instantiated during deserialization. Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml&apos;s SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.
</system-out><system-err>location: /home/khannasa/.m2/repository/org/yaml/snakeyaml/1.21/snakeyaml-1.21.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2017-18640" name="pkg:maven/org.yaml/snakeyaml@1.21"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The Alias feature in SnakeYAML before 1.26 allows entity expansion during a load operation, a related issue to CVE-2003-1564.</system-out><system-err>location: /home/khannasa/.m2/repository/org/yaml/snakeyaml/1.21/snakeyaml-1.21.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-25857" name="pkg:maven/org.yaml/snakeyaml@1.21"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.</system-out><system-err>location: /home/khannasa/.m2/repository/org/yaml/snakeyaml/1.21/snakeyaml-1.21.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-38749" name="pkg:maven/org.yaml/snakeyaml@1.21"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.</system-out><system-err>location: /home/khannasa/.m2/repository/org/yaml/snakeyaml/1.21/snakeyaml-1.21.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-38751" name="pkg:maven/org.yaml/snakeyaml@1.21"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.</system-out><system-err>location: /home/khannasa/.m2/repository/org/yaml/snakeyaml/1.21/snakeyaml-1.21.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-38752" name="pkg:maven/org.yaml/snakeyaml@1.21"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow.</system-out><system-err>location: /home/khannasa/.m2/repository/org/yaml/snakeyaml/1.21/snakeyaml-1.21.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-41854" name="pkg:maven/org.yaml/snakeyaml@1.21"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)"/><system-out>Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/yaml/snakeyaml/1.21/snakeyaml-1.21.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-38750" name="pkg:maven/org.yaml/snakeyaml@1.21"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)"/><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.</system-out><system-err>location: /home/khannasa/.m2/repository/org/yaml/snakeyaml/1.21/snakeyaml-1.21.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="5" errors="0" time="0" id="123" name="/home/khannasa/.m2/repository/org/springframework/boot/spring-boot/1.5.1.RELEASE/spring-boot-1.5.1.RELEASE.jar" package="spring-boot-1.5.1.RELEASE.jar" skipped="0" tests="5" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2017-8046" name="pkg:maven/org.springframework.boot/spring-boot@1.5.1.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Malicious PATCH requests submitted to servers using Spring Data REST versions prior to 2.6.9 (Ingalls SR9), versions prior to 3.0.1 (Kay SR1) and Spring Boot versions prior to 1.5.9, 2.0 M6 can use specially crafted JSON data to run arbitrary Java code.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot/1.5.1.RELEASE/spring-boot-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20873" name="pkg:maven/org.springframework.boot/spring-boot@1.5.1.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In Spring Boot versions 3.0.0 - 3.0.5, 2.7.0 - 2.7.10, and older unsupported versions, an application that is deployed to Cloud Foundry could be susceptible to a security bypass. Users of affected versions should apply the following mitigation: 3.0.x users should upgrade to 3.0.6+. 2.7.x users should upgrade to 2.7.11+. Users of older, unsupported versions should upgrade to 3.0.6+ or 2.7.11+.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot/1.5.1.RELEASE/spring-boot-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-27772" name="pkg:maven/org.springframework.boot/spring-boot@1.5.1.RELEASE"><failure message="cvssV3: HIGH, score: 7.8 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>spring-boot versions prior to version v2.2.11.RELEASE was vulnerable to temporary directory hijacking. This vulnerability impacted the org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir method. NOTE: This vulnerability only affects products and/or versions that are no longer supported by the maintainer</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot/1.5.1.RELEASE/spring-boot-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20883" name="pkg:maven/org.springframework.boot/spring-boot@1.5.1.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In Spring Boot versions 3.0.0 - 3.0.6, 2.7.0 - 2.7.11, 2.6.0 - 2.6.14, 2.5.0 - 2.5.14 and older unsupported versions, there is potential for a denial-of-service (DoS) attack if Spring MVC is used together with a reverse proxy cache.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot/1.5.1.RELEASE/spring-boot-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1196" name="pkg:maven/org.springframework.boot/spring-boot@1.5.1.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Spring Boot supports an embedded launch script that can be used to easily run the application as a systemd or init.d linux service. The script included with Spring Boot 1.5.9 and earlier and 2.0.0.M1 through 2.0.0.M7 is susceptible to a symlink attack which allows the &quot;run_user&quot; to overwrite and take ownership of any file on the same system. In order to instigate the attack, the application must be installed as a service and the &quot;run_user&quot; requires shell access to the server. Spring Boot application that are not installed as a service, or are not using the embedded launch script are not susceptible.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot/1.5.1.RELEASE/spring-boot-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="3" errors="0" time="0" id="124" name="/home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-security/2.1.5.RELEASE/spring-boot-starter-security-2.1.5.RELEASE.jar" package="spring-boot-starter-security-2.1.5.RELEASE.jar" skipped="0" tests="3" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2023-20873" name="pkg:maven/org.springframework.boot/spring-boot-starter-security@2.1.5.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In Spring Boot versions 3.0.0 - 3.0.5, 2.7.0 - 2.7.10, and older unsupported versions, an application that is deployed to Cloud Foundry could be susceptible to a security bypass. Users of affected versions should apply the following mitigation: 3.0.x users should upgrade to 3.0.6+. 2.7.x users should upgrade to 2.7.11+. Users of older, unsupported versions should upgrade to 3.0.6+ or 2.7.11+.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-security/2.1.5.RELEASE/spring-boot-starter-security-2.1.5.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-27772" name="pkg:maven/org.springframework.boot/spring-boot-starter-security@2.1.5.RELEASE"><failure message="cvssV3: HIGH, score: 7.8 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>spring-boot versions prior to version v2.2.11.RELEASE was vulnerable to temporary directory hijacking. This vulnerability impacted the org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir method. NOTE: This vulnerability only affects products and/or versions that are no longer supported by the maintainer</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-security/2.1.5.RELEASE/spring-boot-starter-security-2.1.5.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20883" name="pkg:maven/org.springframework.boot/spring-boot-starter-security@2.1.5.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In Spring Boot versions 3.0.0 - 3.0.6, 2.7.0 - 2.7.11, 2.6.0 - 2.6.14, 2.5.0 - 2.5.14 and older unsupported versions, there is potential for a denial-of-service (DoS) attack if Spring MVC is used together with a reverse proxy cache.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-security/2.1.5.RELEASE/spring-boot-starter-security-2.1.5.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="6" errors="0" time="0" id="125" name="/home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf/1.5.1.RELEASE/spring-boot-starter-thymeleaf-1.5.1.RELEASE.jar" package="spring-boot-starter-thymeleaf-1.5.1.RELEASE.jar" skipped="0" tests="6" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2017-8046" name="pkg:maven/org.springframework.boot/spring-boot-starter-thymeleaf@1.5.1.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Malicious PATCH requests submitted to servers using Spring Data REST versions prior to 2.6.9 (Ingalls SR9), versions prior to 3.0.1 (Kay SR1) and Spring Boot versions prior to 1.5.9, 2.0 M6 can use specially crafted JSON data to run arbitrary Java code.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf/1.5.1.RELEASE/spring-boot-starter-thymeleaf-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20873" name="pkg:maven/org.springframework.boot/spring-boot-starter-thymeleaf@1.5.1.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In Spring Boot versions 3.0.0 - 3.0.5, 2.7.0 - 2.7.10, and older unsupported versions, an application that is deployed to Cloud Foundry could be susceptible to a security bypass. Users of affected versions should apply the following mitigation: 3.0.x users should upgrade to 3.0.6+. 2.7.x users should upgrade to 2.7.11+. Users of older, unsupported versions should upgrade to 3.0.6+ or 2.7.11+.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf/1.5.1.RELEASE/spring-boot-starter-thymeleaf-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-27772" name="pkg:maven/org.springframework.boot/spring-boot-starter-thymeleaf@1.5.1.RELEASE"><failure message="cvssV3: HIGH, score: 7.8 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>spring-boot versions prior to version v2.2.11.RELEASE was vulnerable to temporary directory hijacking. This vulnerability impacted the org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir method. NOTE: This vulnerability only affects products and/or versions that are no longer supported by the maintainer</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf/1.5.1.RELEASE/spring-boot-starter-thymeleaf-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20883" name="pkg:maven/org.springframework.boot/spring-boot-starter-thymeleaf@1.5.1.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In Spring Boot versions 3.0.0 - 3.0.6, 2.7.0 - 2.7.11, 2.6.0 - 2.6.14, 2.5.0 - 2.5.14 and older unsupported versions, there is potential for a denial-of-service (DoS) attack if Spring MVC is used together with a reverse proxy cache.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf/1.5.1.RELEASE/spring-boot-starter-thymeleaf-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-38286" name="pkg:maven/org.springframework.boot/spring-boot-starter-thymeleaf@1.5.1.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Thymeleaf through 3.1.1.RELEASE, as used in spring-boot-admin (aka Spring Boot Admin) through 3.1.1 and other products, allows sandbox bypass via crafted HTML. This may be relevant for SSTI (Server Side Template Injection) and code execution in spring-boot-admin if MailNotifier is enabled and there is write access to environment variables via the UI.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf/1.5.1.RELEASE/spring-boot-starter-thymeleaf-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1196" name="pkg:maven/org.springframework.boot/spring-boot-starter-thymeleaf@1.5.1.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Spring Boot supports an embedded launch script that can be used to easily run the application as a systemd or init.d linux service. The script included with Spring Boot 1.5.9 and earlier and 2.0.0.M1 through 2.0.0.M7 is susceptible to a symlink attack which allows the &quot;run_user&quot; to overwrite and take ownership of any file on the same system. In order to instigate the attack, the application must be installed as a service and the &quot;run_user&quot; requires shell access to the server. Spring Boot application that are not installed as a service, or are not using the embedded launch script are not susceptible.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf/1.5.1.RELEASE/spring-boot-starter-thymeleaf-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="6" errors="0" time="0" id="126" name="/home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.5.1.RELEASE/spring-boot-starter-web-1.5.1.RELEASE.jar" package="spring-boot-starter-web-1.5.1.RELEASE.jar" skipped="0" tests="6" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2017-8046" name="pkg:maven/org.springframework.boot/spring-boot-starter-web@1.5.1.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Malicious PATCH requests submitted to servers using Spring Data REST versions prior to 2.6.9 (Ingalls SR9), versions prior to 3.0.1 (Kay SR1) and Spring Boot versions prior to 1.5.9, 2.0 M6 can use specially crafted JSON data to run arbitrary Java code.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.5.1.RELEASE/spring-boot-starter-web-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-4236" name="pkg:maven/org.springframework.boot/spring-boot-starter-web@1.5.1.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Web Sockets do not execute any AuthenticateMethod methods which may be set, leading to a nil pointer dereference if the returned UserData pointer is assumed to be non-nil, or authentication bypass. This issue only affects WebSockets with an AuthenticateMethod hook. Request handlers that do not explicitly use WebSockets are not vulnerable.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.5.1.RELEASE/spring-boot-starter-web-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20873" name="pkg:maven/org.springframework.boot/spring-boot-starter-web@1.5.1.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In Spring Boot versions 3.0.0 - 3.0.5, 2.7.0 - 2.7.10, and older unsupported versions, an application that is deployed to Cloud Foundry could be susceptible to a security bypass. Users of affected versions should apply the following mitigation: 3.0.x users should upgrade to 3.0.6+. 2.7.x users should upgrade to 2.7.11+. Users of older, unsupported versions should upgrade to 3.0.6+ or 2.7.11+.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.5.1.RELEASE/spring-boot-starter-web-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-27772" name="pkg:maven/org.springframework.boot/spring-boot-starter-web@1.5.1.RELEASE"><failure message="cvssV3: HIGH, score: 7.8 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>spring-boot versions prior to version v2.2.11.RELEASE was vulnerable to temporary directory hijacking. This vulnerability impacted the org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir method. NOTE: This vulnerability only affects products and/or versions that are no longer supported by the maintainer</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.5.1.RELEASE/spring-boot-starter-web-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20883" name="pkg:maven/org.springframework.boot/spring-boot-starter-web@1.5.1.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In Spring Boot versions 3.0.0 - 3.0.6, 2.7.0 - 2.7.11, 2.6.0 - 2.6.14, 2.5.0 - 2.5.14 and older unsupported versions, there is potential for a denial-of-service (DoS) attack if Spring MVC is used together with a reverse proxy cache.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.5.1.RELEASE/spring-boot-starter-web-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1196" name="pkg:maven/org.springframework.boot/spring-boot-starter-web@1.5.1.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>Spring Boot supports an embedded launch script that can be used to easily run the application as a systemd or init.d linux service. The script included with Spring Boot 1.5.9 and earlier and 2.0.0.M1 through 2.0.0.M7 is susceptible to a symlink attack which allows the &quot;run_user&quot; to overwrite and take ownership of any file on the same system. In order to instigate the attack, the application must be installed as a service and the &quot;run_user&quot; requires shell access to the server. Spring Boot application that are not installed as a service, or are not using the embedded launch script are not susceptible.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.5.1.RELEASE/spring-boot-starter-web-1.5.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="127" name="/home/khannasa/.m2/repository/org/springframework/cloud/spring-cloud-commons/1.1.3.RELEASE/spring-cloud-commons-1.1.3.RELEASE.jar" package="spring-cloud-commons-1.1.3.RELEASE.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="spring-cloud-commons-1.1.3.RELEASE.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="128" name="/home/khannasa/.m2/repository/org/springframework/cloud/spring-cloud-context/1.1.3.RELEASE/spring-cloud-context-1.1.3.RELEASE.jar" package="spring-cloud-context-1.1.3.RELEASE.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="spring-cloud-context-1.1.3.RELEASE.jar"/></testsuite><testsuite failures="2" errors="0" time="0" id="129" name="/home/khannasa/.m2/repository/org/springframework/cloud/spring-cloud-netflix-core/1.2.0.RELEASE/spring-cloud-netflix-core-1.2.0.RELEASE.jar" package="spring-cloud-netflix-core-1.2.0.RELEASE.jar" skipped="0" tests="2" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-5412" name="pkg:maven/org.springframework.cloud/spring-cloud-netflix-core@1.2.0.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Cloud Netflix, versions 2.2.x prior to 2.2.4, versions 2.1.x prior to 2.1.6, and older unsupported versions allow applications to use the Hystrix Dashboard proxy.stream endpoint to make requests to any server reachable by the server hosting the dashboard. A malicious user, or attacker, can send a request to other servers that should not be exposed publicly.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/cloud/spring-cloud-netflix-core/1.2.0.RELEASE/spring-cloud-netflix-core-1.2.0.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-22113" name="pkg:maven/org.springframework.cloud/spring-cloud-netflix-core@1.2.0.RELEASE"><failure message="cvssV2: MEDIUM, score: 5.3 (/AV:N/AC:L/Au:/C:N/I:L/A:N)"/><system-out>Applications using the “Sensitive Headers” functionality in Spring Cloud Netflix Zuul 2.2.6.RELEASE and below may be vulnerable to bypassing the “Sensitive Headers” restriction when executing requests with specially constructed URLs. Applications that use Spring Security&apos;s StrictHttpFirewall (enabled by default for all URLs) are not affected by the vulnerability, as they reject requests that allow bypassing.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/cloud/spring-cloud-netflix-core/1.2.0.RELEASE/spring-cloud-netflix-core-1.2.0.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="130" name="/home/khannasa/.m2/repository/org/springframework/cloud/spring-cloud-netflix-eureka-client/1.2.0.RELEASE/spring-cloud-netflix-eureka-client-1.2.0.RELEASE.jar" package="spring-cloud-netflix-eureka-client-1.2.0.RELEASE.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-5412" name="pkg:maven/org.springframework.cloud/spring-cloud-netflix-eureka-client@1.2.0.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Cloud Netflix, versions 2.2.x prior to 2.2.4, versions 2.1.x prior to 2.1.6, and older unsupported versions allow applications to use the Hystrix Dashboard proxy.stream endpoint to make requests to any server reachable by the server hosting the dashboard. A malicious user, or attacker, can send a request to other servers that should not be exposed publicly.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/cloud/spring-cloud-netflix-eureka-client/1.2.0.RELEASE/spring-cloud-netflix-eureka-client-1.2.0.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="131" name="/home/khannasa/.m2/repository/org/springframework/cloud/spring-cloud-starter/1.1.3.RELEASE/spring-cloud-starter-1.1.3.RELEASE.jar" package="spring-cloud-starter-1.1.3.RELEASE.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="spring-cloud-starter-1.1.3.RELEASE.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="132" name="/home/khannasa/.m2/repository/org/springframework/cloud/spring-cloud-starter-netflix-ribbon/1.4.0.RELEASE/spring-cloud-starter-netflix-ribbon-1.4.0.RELEASE.jar" package="spring-cloud-starter-netflix-ribbon-1.4.0.RELEASE.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-5412" name="pkg:maven/org.springframework.cloud/spring-cloud-starter-netflix-ribbon@1.4.0.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Cloud Netflix, versions 2.2.x prior to 2.2.4, versions 2.1.x prior to 2.1.6, and older unsupported versions allow applications to use the Hystrix Dashboard proxy.stream endpoint to make requests to any server reachable by the server hosting the dashboard. A malicious user, or attacker, can send a request to other servers that should not be exposed publicly.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/cloud/spring-cloud-starter-netflix-ribbon/1.4.0.RELEASE/spring-cloud-starter-netflix-ribbon-1.4.0.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="15" errors="0" time="0" id="133" name="/home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar" package="spring-core-4.3.6.RELEASE.jar" skipped="0" tests="15" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2018-1270" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1275" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.16 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack. This CVE addresses the partial fix for CVE-2018-1270 in the 4.3.x branch of the Spring Framework.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22965" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-11040" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and older unsupported versions, allows web applications to enable cross-domain requests via JSONP (JSON with Padding) through AbstractJsonpResponseBodyAdvice for REST controllers and MappingJackson2JsonView for browser requests. Both are not enabled by default in Spring Framework nor Spring Boot, however, when MappingJackson2JsonView is configured in an application, JSONP support is automatically ready to use through the &quot;jsonp&quot; and &quot;callback&quot; JSONP parameters, enabling cross-domain requests.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1272" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-15756" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Spring Framework, version 5.1, versions 5.0.x prior to 5.0.10, versions 4.3.x prior to 4.3.20, and older unsupported versions on the 4.2.x branch provide support for range requests when serving static resources through the ResourceHttpRequestHandler, or starting in 5.0 when an annotated controller returns an org.springframework.core.io.Resource. A malicious user (or attacker) can add a range header with a high number of ranges, or with wide ranges that overlap, or both, for a denial of service attack. This vulnerability affects applications that depend on either spring-webmvc or spring-webflux. Such applications must also have a registration for serving static resources (e.g. JS, CSS, images, and others), or have an annotated controller that returns an org.springframework.core.io.Resource. Spring Boot applications that depend on spring-boot-starter-web or spring-boot-starter-webflux are ready to serve static resources out of the box and are therefore vulnerable.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1257" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Spring Framework, versions 5.0.x prior to 5.0.6, versions 4.3.x prior to 4.3.17, and older unsupported versions allows applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a regular expression, denial of service attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-5421" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:H/A:N)"/><system-out>In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22950" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>n Spring Framework versions 5.3.0 - 5.3.16 and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial of service condition.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20861" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In Spring Framework versions 6.0.0 - 6.0.6, 5.3.0 - 5.3.25, 5.2.0.RELEASE - 5.2.22.RELEASE, and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial-of-service (DoS) condition.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-11039" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework (versions 5.0.x prior to 5.0.7, versions 4.3.x prior to 4.3.18, and older unsupported versions) allow web applications to change the HTTP request method to any HTTP method (including TRACE) using the HiddenHttpMethodFilter in Spring MVC. If an application has a pre-existing XSS vulnerability, a malicious user (or attacker) can use this filter to escalate to an XST (Cross Site Tracing) attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1271" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to configure Spring MVC to serve static resources (e.g. CSS, JS, images). When static resources are served from a file system on Windows (as opposed to the classpath, or the ServletContext), a malicious user can send a request using a specially crafted URL that can lead a directory traversal attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1199" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3) does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22968" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>In Spring Framework versions 5.3.0 - 5.3.18, 5.2.0 - 5.2.20, and older unsupported versions, the patterns for disallowedFields on a DataBinder are case sensitive which means a field is not effectively protected unless it is listed with both upper and lower case for the first character of the field, including upper and lower case for the first character of all nested fields within the property path.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22970" name="pkg:maven/org.springframework/spring-core@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, applications that handle file uploads are vulnerable to DoS attack if they rely on data binding to set a MultipartFile or javax.servlet.Part to a field in a model object.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-core/4.3.6.RELEASE/spring-core-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="134" name="/home/khannasa/.m2/repository/org/springframework/data/spring-data-commons/1.13.11.RELEASE/spring-data-commons-1.13.11.RELEASE.jar" package="spring-data-commons-1.13.11.RELEASE.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2018-1259" name="pkg:maven/org.springframework.data/spring-data-commons@1.13.11.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Data Commons, versions 1.13 prior to 1.13.12 and 2.0 prior to 2.0.7, used in combination with XMLBeam 1.4.14 or earlier versions, contains a property binder vulnerability caused by improper restriction of XML external entity references as underlying library XMLBeam does not restrict external reference expansion. An unauthenticated remote malicious user can supply specially crafted request parameters against Spring Data&apos;s projection-based request payload binding to access arbitrary files on the system.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/data/spring-data-commons/1.13.11.RELEASE/spring-data-commons-1.13.11.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="16" errors="0" time="0" id="135" name="/home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar" package="spring-expression-4.3.6.RELEASE.jar" skipped="0" tests="16" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2018-1270" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1275" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.16 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack. This CVE addresses the partial fix for CVE-2018-1270 in the 4.3.x branch of the Spring Framework.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22965" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-11040" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and older unsupported versions, allows web applications to enable cross-domain requests via JSONP (JSON with Padding) through AbstractJsonpResponseBodyAdvice for REST controllers and MappingJackson2JsonView for browser requests. Both are not enabled by default in Spring Framework nor Spring Boot, however, when MappingJackson2JsonView is configured in an application, JSONP support is automatically ready to use through the &quot;jsonp&quot; and &quot;callback&quot; JSONP parameters, enabling cross-domain requests.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1272" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-15756" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Spring Framework, version 5.1, versions 5.0.x prior to 5.0.10, versions 4.3.x prior to 4.3.20, and older unsupported versions on the 4.2.x branch provide support for range requests when serving static resources through the ResourceHttpRequestHandler, or starting in 5.0 when an annotated controller returns an org.springframework.core.io.Resource. A malicious user (or attacker) can add a range header with a high number of ranges, or with wide ranges that overlap, or both, for a denial of service attack. This vulnerability affects applications that depend on either spring-webmvc or spring-webflux. Such applications must also have a registration for serving static resources (e.g. JS, CSS, images, and others), or have an annotated controller that returns an org.springframework.core.io.Resource. Spring Boot applications that depend on spring-boot-starter-web or spring-boot-starter-webflux are ready to serve static resources out of the box and are therefore vulnerable.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1257" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Spring Framework, versions 5.0.x prior to 5.0.6, versions 4.3.x prior to 4.3.17, and older unsupported versions allows applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a regular expression, denial of service attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-5421" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:H/A:N)"/><system-out>In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22950" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>n Spring Framework versions 5.3.0 - 5.3.16 and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial of service condition.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20861" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In Spring Framework versions 6.0.0 - 6.0.6, 5.3.0 - 5.3.25, 5.2.0.RELEASE - 5.2.22.RELEASE, and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial-of-service (DoS) condition.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20863" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV2: MEDIUM, score: 6.5 (/AV:N/AC:L/Au:/C:N/I:N/A:H)"/><system-out>In spring framework versions prior to 5.2.24 release+ ,5.3.27+ and 6.0.8+ , it is possible for a user to provide a specially crafted SpEL expression that may cause a denial-of-service (DoS) condition.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-11039" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework (versions 5.0.x prior to 5.0.7, versions 4.3.x prior to 4.3.18, and older unsupported versions) allow web applications to change the HTTP request method to any HTTP method (including TRACE) using the HiddenHttpMethodFilter in Spring MVC. If an application has a pre-existing XSS vulnerability, a malicious user (or attacker) can use this filter to escalate to an XST (Cross Site Tracing) attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1271" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to configure Spring MVC to serve static resources (e.g. CSS, JS, images). When static resources are served from a file system on Windows (as opposed to the classpath, or the ServletContext), a malicious user can send a request using a specially crafted URL that can lead a directory traversal attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1199" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3) does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22968" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>In Spring Framework versions 5.3.0 - 5.3.18, 5.2.0 - 5.2.20, and older unsupported versions, the patterns for disallowedFields on a DataBinder are case sensitive which means a field is not effectively protected unless it is listed with both upper and lower case for the first character of the field, including upper and lower case for the first character of all nested fields within the property path.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22970" name="pkg:maven/org.springframework/spring-expression@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, applications that handle file uploads are vulnerable to DoS attack if they rely on data binding to set a MultipartFile or javax.servlet.Part to a field in a model object.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-expression/4.3.6.RELEASE/spring-expression-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="136" name="/home/khannasa/.m2/repository/org/springframework/plugin/spring-plugin-core/1.2.0.RELEASE/spring-plugin-core-1.2.0.RELEASE.jar" package="spring-plugin-core-1.2.0.RELEASE.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="spring-plugin-core-1.2.0.RELEASE.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="137" name="/home/khannasa/.m2/repository/org/springframework/plugin/spring-plugin-metadata/1.2.0.RELEASE/spring-plugin-metadata-1.2.0.RELEASE.jar" package="spring-plugin-metadata-1.2.0.RELEASE.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="spring-plugin-metadata-1.2.0.RELEASE.jar"/></testsuite><testsuite failures="6" errors="0" time="0" id="138" name="/home/khannasa/.m2/repository/org/springframework/security/spring-security-config/4.2.12.RELEASE/spring-security-config-4.2.12.RELEASE.jar" package="spring-security-config-4.2.12.RELEASE.jar" skipped="0" tests="6" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-22978" name="pkg:maven/org.springframework.security/spring-security-config@4.2.12.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In spring security versions prior to 5.4.11+, 5.5.7+ , 5.6.4+ and older unsupported versions, RegexRequestMatcher can easily be misconfigured to be bypassed on some servlet containers. Applications using RegexRequestMatcher with `.` in the regular expression are possibly vulnerable to an authorization bypass.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-config/4.2.12.RELEASE/spring-security-config-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-22112" name="pkg:maven/org.springframework.security/spring-security-config@4.2.12.RELEASE"><failure message="cvssV3: HIGH, score: 8.8 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Security 5.4.x prior to 5.4.4, 5.3.x prior to 5.3.8.RELEASE, 5.2.x prior to 5.2.9.RELEASE, and older unsupported versions can fail to save the SecurityContext if it is changed more than once in a single request.A malicious user cannot cause the bug to happen (it must be programmed in). However, if the application&apos;s intent is to only allow the user to run with elevated privileges in a small portion of the application, the bug can be leveraged to extend those privileges to the rest of the application.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-config/4.2.12.RELEASE/spring-security-config-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-11272" name="pkg:maven/org.springframework.security/spring-security-config@4.2.12.RELEASE"><failure message="cvssV3: HIGH, score: 7.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L)"/><system-out>Spring Security, versions 4.2.x up to 4.2.12, and older unsupported versions support plain text passwords using PlaintextPasswordEncoder. If an application using an affected version of Spring Security is leveraging PlaintextPasswordEncoder and a user has a null encoded password, a malicious user (or attacker) can authenticate using a password of &quot;null&quot;.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-config/4.2.12.RELEASE/spring-security-config-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-5408" name="pkg:maven/org.springframework.security/spring-security-config@4.2.12.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Security versions 5.3.x prior to 5.3.2, 5.2.x prior to 5.2.4, 5.1.x prior to 5.1.10, 5.0.x prior to 5.0.16 and 4.2.x prior to 4.2.16 use a fixed null initialization vector with CBC Mode in the implementation of the queryable text encryptor. A malicious user with access to the data that has been encrypted using such an encryptor may be able to derive the unencrypted values using a dictionary attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-config/4.2.12.RELEASE/spring-security-config-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20862" name="pkg:maven/org.springframework.security/spring-security-config@4.2.12.RELEASE"><failure message="cvssV2: MEDIUM, score: 6.3 (/AV:N/AC:L/Au:/C:L/I:L/A:L)"/><system-out>In Spring Security, versions 5.7.x prior to 5.7.8, versions 5.8.x prior to 5.8.3, and versions 6.0.x prior to 6.0.3, the logout support does not properly clean the security context if using serialized versions. Additionally, it is not possible to explicitly save an empty security context to the HttpSessionSecurityContextRepository. This vulnerability can keep users authenticated even after they performed logout. Users of affected versions should apply the following mitigation. 5.7.x users should upgrade to 5.7.8. 5.8.x users should upgrade to 5.8.3. 6.0.x users should upgrade to 6.0.3.

Sonatype&apos;s research suggests that this CVE&apos;s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2023-20862 for details</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-config/4.2.12.RELEASE/spring-security-config-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22976" name="pkg:maven/org.springframework.security/spring-security-config@4.2.12.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Spring Security versions 5.5.x prior to 5.5.7, 5.6.x prior to 5.6.4, and earlier unsupported versions contain an integer overflow vulnerability. When using the BCrypt class with the maximum work factor (31), the encoder does not perform any salt rounds, due to an integer overflow error. The default settings are not affected by this CVE.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-config/4.2.12.RELEASE/spring-security-config-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="8" errors="0" time="0" id="139" name="/home/khannasa/.m2/repository/org/springframework/security/spring-security-core/4.2.1.RELEASE/spring-security-core-4.2.1.RELEASE.jar" package="spring-security-core-4.2.1.RELEASE.jar" skipped="0" tests="8" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-22978" name="pkg:maven/org.springframework.security/spring-security-core@4.2.1.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In spring security versions prior to 5.4.11+, 5.5.7+ , 5.6.4+ and older unsupported versions, RegexRequestMatcher can easily be misconfigured to be bypassed on some servlet containers. Applications using RegexRequestMatcher with `.` in the regular expression are possibly vulnerable to an authorization bypass.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-core/4.2.1.RELEASE/spring-security-core-4.2.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-22112" name="pkg:maven/org.springframework.security/spring-security-core@4.2.1.RELEASE"><failure message="cvssV3: HIGH, score: 8.8 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Security 5.4.x prior to 5.4.4, 5.3.x prior to 5.3.8.RELEASE, 5.2.x prior to 5.2.9.RELEASE, and older unsupported versions can fail to save the SecurityContext if it is changed more than once in a single request.A malicious user cannot cause the bug to happen (it must be programmed in). However, if the application&apos;s intent is to only allow the user to run with elevated privileges in a small portion of the application, the bug can be leveraged to extend those privileges to the rest of the application.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-core/4.2.1.RELEASE/spring-security-core-4.2.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2017-4995" name="pkg:maven/org.springframework.security/spring-security-core@4.2.1.RELEASE"><failure message="cvssV3: HIGH, score: 8.1 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>An issue was discovered in Pivotal Spring Security 4.2.0.RELEASE through 4.2.2.RELEASE, and Spring Security 5.0.0.M1. When configured to enable default typing, Jackson contained a deserialization vulnerability that could lead to arbitrary code execution. Jackson fixed this vulnerability by blacklisting known &quot;deserialization gadgets.&quot; Spring Security configures Jackson with global default typing enabled, which means that (through the previous exploit) arbitrary code could be executed if all of the following is true: (1) Spring Security&apos;s Jackson support is being leveraged by invoking SecurityJackson2Modules.getModules(ClassLoader) or SecurityJackson2Modules.enableDefaultTyping(ObjectMapper); (2) Jackson is used to deserialize data that is not trusted (Spring Security does not perform deserialization using Jackson, so this is an explicit choice of the user); and (3) there is an unknown (Jackson is not blacklisting it already) &quot;deserialization gadget&quot; that allows code execution present on the classpath. Jackson provides a blacklisting approach to protecting against this type of attack, but Spring Security should be proactive against blocking unknown &quot;deserialization gadgets&quot; when Spring Security enables default typing.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-core/4.2.1.RELEASE/spring-security-core-4.2.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-11272" name="pkg:maven/org.springframework.security/spring-security-core@4.2.1.RELEASE"><failure message="cvssV3: HIGH, score: 7.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L)"/><system-out>Spring Security, versions 4.2.x up to 4.2.12, and older unsupported versions support plain text passwords using PlaintextPasswordEncoder. If an application using an affected version of Spring Security is leveraging PlaintextPasswordEncoder and a user has a null encoded password, a malicious user (or attacker) can authenticate using a password of &quot;null&quot;.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-core/4.2.1.RELEASE/spring-security-core-4.2.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-5408" name="pkg:maven/org.springframework.security/spring-security-core@4.2.1.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Security versions 5.3.x prior to 5.3.2, 5.2.x prior to 5.2.4, 5.1.x prior to 5.1.10, 5.0.x prior to 5.0.16 and 4.2.x prior to 4.2.16 use a fixed null initialization vector with CBC Mode in the implementation of the queryable text encryptor. A malicious user with access to the data that has been encrypted using such an encryptor may be able to derive the unencrypted values using a dictionary attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-core/4.2.1.RELEASE/spring-security-core-4.2.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1199" name="pkg:maven/org.springframework.security/spring-security-core@4.2.1.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3) does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-core/4.2.1.RELEASE/spring-security-core-4.2.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-3795" name="pkg:maven/org.springframework.security/spring-security-core@4.2.1.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Spring Security versions 4.2.x prior to 4.2.12, 5.0.x prior to 5.0.12, and 5.1.x prior to 5.1.5 contain an insecure randomness vulnerability when using SecureRandomFactoryBean#setSeed to configure a SecureRandom instance. In order to be impacted, an honest application must provide a seed and make the resulting random material available to an attacker for inspection.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-core/4.2.1.RELEASE/spring-security-core-4.2.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22976" name="pkg:maven/org.springframework.security/spring-security-core@4.2.1.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Spring Security versions 5.5.x prior to 5.5.7, 5.6.x prior to 5.6.4, and earlier unsupported versions contain an integer overflow vulnerability. When using the BCrypt class with the maximum work factor (31), the encoder does not perform any salt rounds, due to an integer overflow error. The default settings are not affected by this CVE.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-core/4.2.1.RELEASE/spring-security-core-4.2.1.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="140" name="/home/khannasa/.m2/repository/org/springframework/security/spring-security-rsa/1.0.3.RELEASE/spring-security-rsa-1.0.3.RELEASE.jar" package="spring-security-rsa-1.0.3.RELEASE.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="spring-security-rsa-1.0.3.RELEASE.jar"/></testsuite><testsuite failures="6" errors="0" time="0" id="141" name="/home/khannasa/.m2/repository/org/springframework/security/spring-security-web/4.2.12.RELEASE/spring-security-web-4.2.12.RELEASE.jar" package="spring-security-web-4.2.12.RELEASE.jar" skipped="0" tests="6" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-22978" name="pkg:maven/org.springframework.security/spring-security-web@4.2.12.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In spring security versions prior to 5.4.11+, 5.5.7+ , 5.6.4+ and older unsupported versions, RegexRequestMatcher can easily be misconfigured to be bypassed on some servlet containers. Applications using RegexRequestMatcher with `.` in the regular expression are possibly vulnerable to an authorization bypass.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-web/4.2.12.RELEASE/spring-security-web-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-22112" name="pkg:maven/org.springframework.security/spring-security-web@4.2.12.RELEASE"><failure message="cvssV3: HIGH, score: 8.8 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Security 5.4.x prior to 5.4.4, 5.3.x prior to 5.3.8.RELEASE, 5.2.x prior to 5.2.9.RELEASE, and older unsupported versions can fail to save the SecurityContext if it is changed more than once in a single request.A malicious user cannot cause the bug to happen (it must be programmed in). However, if the application&apos;s intent is to only allow the user to run with elevated privileges in a small portion of the application, the bug can be leveraged to extend those privileges to the rest of the application.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-web/4.2.12.RELEASE/spring-security-web-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-11272" name="pkg:maven/org.springframework.security/spring-security-web@4.2.12.RELEASE"><failure message="cvssV3: HIGH, score: 7.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L)"/><system-out>Spring Security, versions 4.2.x up to 4.2.12, and older unsupported versions support plain text passwords using PlaintextPasswordEncoder. If an application using an affected version of Spring Security is leveraging PlaintextPasswordEncoder and a user has a null encoded password, a malicious user (or attacker) can authenticate using a password of &quot;null&quot;.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-web/4.2.12.RELEASE/spring-security-web-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-5408" name="pkg:maven/org.springframework.security/spring-security-web@4.2.12.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Security versions 5.3.x prior to 5.3.2, 5.2.x prior to 5.2.4, 5.1.x prior to 5.1.10, 5.0.x prior to 5.0.16 and 4.2.x prior to 4.2.16 use a fixed null initialization vector with CBC Mode in the implementation of the queryable text encryptor. A malicious user with access to the data that has been encrypted using such an encryptor may be able to derive the unencrypted values using a dictionary attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-web/4.2.12.RELEASE/spring-security-web-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20862" name="pkg:maven/org.springframework.security/spring-security-web@4.2.12.RELEASE"><failure message="cvssV2: MEDIUM, score: 6.3 (/AV:N/AC:L/Au:/C:L/I:L/A:L)"/><system-out>In Spring Security, versions 5.7.x prior to 5.7.8, versions 5.8.x prior to 5.8.3, and versions 6.0.x prior to 6.0.3, the logout support does not properly clean the security context if using serialized versions. Additionally, it is not possible to explicitly save an empty security context to the HttpSessionSecurityContextRepository. This vulnerability can keep users authenticated even after they performed logout. Users of affected versions should apply the following mitigation. 5.7.x users should upgrade to 5.7.8. 5.8.x users should upgrade to 5.8.3. 6.0.x users should upgrade to 6.0.3.

Sonatype&apos;s research suggests that this CVE&apos;s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2023-20862 for details</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-web/4.2.12.RELEASE/spring-security-web-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22976" name="pkg:maven/org.springframework.security/spring-security-web@4.2.12.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Spring Security versions 5.5.x prior to 5.5.7, 5.6.x prior to 5.6.4, and earlier unsupported versions contain an integer overflow vulnerability. When using the BCrypt class with the maximum work factor (31), the encoder does not perform any salt rounds, due to an integer overflow error. The default settings are not affected by this CVE.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/security/spring-security-web/4.2.12.RELEASE/spring-security-web-4.2.12.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="16" errors="0" time="0" id="142" name="/home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar" package="spring-web-4.3.6.RELEASE.jar" skipped="0" tests="16" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2016-1000027" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor&apos;s position is that untrusted data is not an intended use case. The product&apos;s behavior will not be changed because some users rely on deserialization of trusted data.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1270" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1275" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.16 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack. This CVE addresses the partial fix for CVE-2018-1270 in the 4.3.x branch of the Spring Framework.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22965" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-11040" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and older unsupported versions, allows web applications to enable cross-domain requests via JSONP (JSON with Padding) through AbstractJsonpResponseBodyAdvice for REST controllers and MappingJackson2JsonView for browser requests. Both are not enabled by default in Spring Framework nor Spring Boot, however, when MappingJackson2JsonView is configured in an application, JSONP support is automatically ready to use through the &quot;jsonp&quot; and &quot;callback&quot; JSONP parameters, enabling cross-domain requests.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1272" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-15756" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Spring Framework, version 5.1, versions 5.0.x prior to 5.0.10, versions 4.3.x prior to 4.3.20, and older unsupported versions on the 4.2.x branch provide support for range requests when serving static resources through the ResourceHttpRequestHandler, or starting in 5.0 when an annotated controller returns an org.springframework.core.io.Resource. A malicious user (or attacker) can add a range header with a high number of ranges, or with wide ranges that overlap, or both, for a denial of service attack. This vulnerability affects applications that depend on either spring-webmvc or spring-webflux. Such applications must also have a registration for serving static resources (e.g. JS, CSS, images, and others), or have an annotated controller that returns an org.springframework.core.io.Resource. Spring Boot applications that depend on spring-boot-starter-web or spring-boot-starter-webflux are ready to serve static resources out of the box and are therefore vulnerable.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1257" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Spring Framework, versions 5.0.x prior to 5.0.6, versions 4.3.x prior to 4.3.17, and older unsupported versions allows applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a regular expression, denial of service attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-5421" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:H/A:N)"/><system-out>In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22950" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>n Spring Framework versions 5.3.0 - 5.3.16 and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial of service condition.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20861" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In Spring Framework versions 6.0.0 - 6.0.6, 5.3.0 - 5.3.25, 5.2.0.RELEASE - 5.2.22.RELEASE, and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial-of-service (DoS) condition.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-11039" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework (versions 5.0.x prior to 5.0.7, versions 4.3.x prior to 4.3.18, and older unsupported versions) allow web applications to change the HTTP request method to any HTTP method (including TRACE) using the HiddenHttpMethodFilter in Spring MVC. If an application has a pre-existing XSS vulnerability, a malicious user (or attacker) can use this filter to escalate to an XST (Cross Site Tracing) attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1271" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to configure Spring MVC to serve static resources (e.g. CSS, JS, images). When static resources are served from a file system on Windows (as opposed to the classpath, or the ServletContext), a malicious user can send a request using a specially crafted URL that can lead a directory traversal attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1199" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3) does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22968" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>In Spring Framework versions 5.3.0 - 5.3.18, 5.2.0 - 5.2.20, and older unsupported versions, the patterns for disallowedFields on a DataBinder are case sensitive which means a field is not effectively protected unless it is listed with both upper and lower case for the first character of the field, including upper and lower case for the first character of all nested fields within the property path.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22970" name="pkg:maven/org.springframework/spring-web@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, applications that handle file uploads are vulnerable to DoS attack if they rely on data binding to set a MultipartFile or javax.servlet.Part to a field in a model object.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-web/4.3.6.RELEASE/spring-web-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="17" errors="0" time="0" id="143" name="/home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar" package="spring-webmvc-4.3.6.RELEASE.jar" skipped="0" tests="17" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2018-1270" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1275" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.16 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack. This CVE addresses the partial fix for CVE-2018-1270 in the 4.3.x branch of the Spring Framework.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22965" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-11040" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and older unsupported versions, allows web applications to enable cross-domain requests via JSONP (JSON with Padding) through AbstractJsonpResponseBodyAdvice for REST controllers and MappingJackson2JsonView for browser requests. Both are not enabled by default in Spring Framework nor Spring Boot, however, when MappingJackson2JsonView is configured in an application, JSONP support is automatically ready to use through the &quot;jsonp&quot; and &quot;callback&quot; JSONP parameters, enabling cross-domain requests.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1272" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-15756" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Spring Framework, version 5.1, versions 5.0.x prior to 5.0.10, versions 4.3.x prior to 4.3.20, and older unsupported versions on the 4.2.x branch provide support for range requests when serving static resources through the ResourceHttpRequestHandler, or starting in 5.0 when an annotated controller returns an org.springframework.core.io.Resource. A malicious user (or attacker) can add a range header with a high number of ranges, or with wide ranges that overlap, or both, for a denial of service attack. This vulnerability affects applications that depend on either spring-webmvc or spring-webflux. Such applications must also have a registration for serving static resources (e.g. JS, CSS, images, and others), or have an annotated controller that returns an org.springframework.core.io.Resource. Spring Boot applications that depend on spring-boot-starter-web or spring-boot-starter-webflux are ready to serve static resources out of the box and are therefore vulnerable.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1257" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Spring Framework, versions 5.0.x prior to 5.0.6, versions 4.3.x prior to 4.3.17, and older unsupported versions allows applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a regular expression, denial of service attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-5421" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:H/A:N)"/><system-out>In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22950" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>n Spring Framework versions 5.3.0 - 5.3.16 and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial of service condition.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-20861" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In Spring Framework versions 6.0.0 - 6.0.6, 5.3.0 - 5.3.25, 5.2.0.RELEASE - 5.2.22.RELEASE, and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial-of-service (DoS) condition.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-11039" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework (versions 5.0.x prior to 5.0.7, versions 4.3.x prior to 4.3.18, and older unsupported versions) allow web applications to change the HTTP request method to any HTTP method (including TRACE) using the HiddenHttpMethodFilter in Spring MVC. If an application has a pre-existing XSS vulnerability, a malicious user (or attacker) can use this filter to escalate to an XST (Cross Site Tracing) attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1271" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to configure Spring MVC to serve static resources (e.g. CSS, JS, images). When static resources are served from a file system on Windows (as opposed to the classpath, or the ServletContext), a malicious user can send a request using a specially crafted URL that can lead a directory traversal attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2018-1199" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3) does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-5397" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV2: MEDIUM, score: 5.3 (/AV:N/AC:L/Au:/C:N/I:L/A:N)"/><system-out>Spring Framework, versions 5.2.x prior to 5.2.3 are vulnerable to CSRF attacks through CORS preflight requests that target Spring MVC (spring-webmvc module) or Spring WebFlux (spring-webflux module) endpoints. Only non-authenticated endpoints are vulnerable because preflight requests should not include credentials and therefore requests should fail authentication. However a notable exception to this are Chrome based browsers when using client certificates for authentication since Chrome sends TLS client certificates in CORS preflight requests in violation of spec requirements. No HTTP body can be sent or received as a result of this attack.

Sonatype&apos;s research suggests that this CVE&apos;s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2020-5397 for details</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22968" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>In Spring Framework versions 5.3.0 - 5.3.18, 5.2.0 - 5.2.20, and older unsupported versions, the patterns for disallowedFields on a DataBinder are case sensitive which means a field is not effectively protected unless it is listed with both upper and lower case for the first character of the field, including upper and lower case for the first character of all nested fields within the property path.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-22970" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, applications that handle file uploads are vulnerable to DoS attack if they rely on data binding to set a MultipartFile or javax.servlet.Part to a field in a model object.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-22060" name="pkg:maven/org.springframework/spring-webmvc@4.3.6.RELEASE"><failure message="cvssV2: MEDIUM, score: 4.3 (/AV:N/AC:L/Au:/C:N/I:L/A:N)"/><system-out>In Spring Framework versions 5.3.0 - 5.3.13, 5.2.0 - 5.2.18, and older unsupported versions, it is possible for a user to provide malicious input to cause the insertion of additional log entries. This is a follow-up to CVE-2021-22096 that protects against additional types of input and in more places of the Spring Framework codebase.</system-out><system-err>location: /home/khannasa/.m2/repository/org/springframework/spring-webmvc/4.3.6.RELEASE/spring-webmvc-4.3.6.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="144" name="/home/khannasa/.m2/repository/io/springfox/springfox-core/2.9.2/springfox-core-2.9.2.jar" package="springfox-core-2.9.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="springfox-core-2.9.2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="145" name="/home/khannasa/.m2/repository/io/springfox/springfox-schema/2.9.2/springfox-schema-2.9.2.jar" package="springfox-schema-2.9.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="springfox-schema-2.9.2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="146" name="/home/khannasa/.m2/repository/io/springfox/springfox-spi/2.9.2/springfox-spi-2.9.2.jar" package="springfox-spi-2.9.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="springfox-spi-2.9.2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="147" name="/home/khannasa/.m2/repository/io/springfox/springfox-spring-web/2.9.2/springfox-spring-web-2.9.2.jar" package="springfox-spring-web-2.9.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="springfox-spring-web-2.9.2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="148" name="/home/khannasa/.m2/repository/io/springfox/springfox-swagger-common/2.9.2/springfox-swagger-common-2.9.2.jar" package="springfox-swagger-common-2.9.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="springfox-swagger-common-2.9.2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="149" name="/home/khannasa/.m2/repository/io/springfox/springfox-swagger-ui/2.9.2/springfox-swagger-ui-2.9.2.jar" package="springfox-swagger-ui-2.9.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="springfox-swagger-ui-2.9.2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="150" name="/home/khannasa/.m2/repository/io/springfox/springfox-swagger-ui/2.9.2/springfox-swagger-ui-2.9.2.jar/META-INF/resources/webjars/springfox-swagger-ui/springfox.js" package="springfox-swagger-ui-2.9.2.jar: springfox.js" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="springfox-swagger-ui-2.9.2.jar: springfox.js"/></testsuite><testsuite failures="0" errors="0" time="0" id="151" name="/home/khannasa/.m2/repository/io/springfox/springfox-swagger-ui/2.9.2/springfox-swagger-ui-2.9.2.jar/META-INF/resources/webjars/springfox-swagger-ui/swagger-ui-bundle.js" package="springfox-swagger-ui-2.9.2.jar: swagger-ui-bundle.js" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="springfox-swagger-ui-2.9.2.jar: swagger-ui-bundle.js"/></testsuite><testsuite failures="0" errors="0" time="0" id="152" name="/home/khannasa/.m2/repository/io/springfox/springfox-swagger-ui/2.9.2/springfox-swagger-ui-2.9.2.jar/META-INF/resources/webjars/springfox-swagger-ui/swagger-ui-standalone-preset.js" package="springfox-swagger-ui-2.9.2.jar: swagger-ui-standalone-preset.js" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="springfox-swagger-ui-2.9.2.jar: swagger-ui-standalone-preset.js"/></testsuite><testsuite failures="0" errors="0" time="0" id="153" name="/home/khannasa/.m2/repository/io/springfox/springfox-swagger2/2.9.2/springfox-swagger2-2.9.2.jar" package="springfox-swagger2-2.9.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="springfox-swagger2-2.9.2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="154" name="/home/khannasa/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar" package="stax-api-1.0-2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="stax-api-1.0-2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="155" name="/home/khannasa/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar" package="stax-api-1.0.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="stax-api-1.0.1.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="156" name="/home/khannasa/.m2/repository/org/codehaus/woodstox/stax2-api/3.1.4/stax2-api-3.1.4.jar" package="stax2-api-3.1.4.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="stax2-api-3.1.4.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="157" name="/home/khannasa/.m2/repository/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar" package="stringtemplate-3.2.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="stringtemplate-3.2.1.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="158" name="/home/khannasa/.m2/repository/io/swagger/swagger-annotations/1.5.20/swagger-annotations-1.5.20.jar" package="swagger-annotations-1.5.20.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="swagger-annotations-1.5.20.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="159" name="/home/khannasa/.m2/repository/io/swagger/swagger-models/1.5.20/swagger-models-1.5.20.jar" package="swagger-models-1.5.20.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="swagger-models-1.5.20.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="160" name="/home/khannasa/.m2/repository/org/thymeleaf/thymeleaf/2.1.5.RELEASE/thymeleaf-2.1.5.RELEASE.jar" package="thymeleaf-2.1.5.RELEASE.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2023-38286" name="pkg:maven/org.thymeleaf/thymeleaf@2.1.5.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Thymeleaf through 3.1.1.RELEASE, as used in spring-boot-admin (aka Spring Boot Admin) through 3.1.1 and other products, allows sandbox bypass via crafted HTML. This may be relevant for SSTI (Server Side Template Injection) and code execution in spring-boot-admin if MailNotifier is enabled and there is write access to environment variables via the UI.</system-out><system-err>location: /home/khannasa/.m2/repository/org/thymeleaf/thymeleaf/2.1.5.RELEASE/thymeleaf-2.1.5.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="161" name="/home/khannasa/.m2/repository/nz/net/ultraq/thymeleaf/thymeleaf-layout-dialect/1.4.0/thymeleaf-layout-dialect-1.4.0.jar" package="thymeleaf-layout-dialect-1.4.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2023-38286" name="pkg:maven/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect@1.4.0"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Thymeleaf through 3.1.1.RELEASE, as used in spring-boot-admin (aka Spring Boot Admin) through 3.1.1 and other products, allows sandbox bypass via crafted HTML. This may be relevant for SSTI (Server Side Template Injection) and code execution in spring-boot-admin if MailNotifier is enabled and there is write access to environment variables via the UI.</system-out><system-err>location: /home/khannasa/.m2/repository/nz/net/ultraq/thymeleaf/thymeleaf-layout-dialect/1.4.0/thymeleaf-layout-dialect-1.4.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="2" errors="0" time="0" id="162" name="/home/khannasa/.m2/repository/org/thymeleaf/thymeleaf-spring4/2.1.5.RELEASE/thymeleaf-spring4-2.1.5.RELEASE.jar" package="thymeleaf-spring4-2.1.5.RELEASE.jar" skipped="0" tests="2" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2021-43466" name="pkg:maven/org.thymeleaf/thymeleaf-spring4@2.1.5.RELEASE"><failure message="cvssV2: HIGH, score: 9.8 (/AV:N/AC:L/Au:/C:H/I:H/A:H)"/><system-out>In the thymeleaf-spring5:3.0.12 component, thymeleaf combined with specific scenarios in template injection may lead to remote code execution.</system-out><system-err>location: /home/khannasa/.m2/repository/org/thymeleaf/thymeleaf-spring4/2.1.5.RELEASE/thymeleaf-spring4-2.1.5.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-38286" name="pkg:maven/org.thymeleaf/thymeleaf-spring4@2.1.5.RELEASE"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Thymeleaf through 3.1.1.RELEASE, as used in spring-boot-admin (aka Spring Boot Admin) through 3.1.1 and other products, allows sandbox bypass via crafted HTML. This may be relevant for SSTI (Server Side Template Injection) and code execution in spring-boot-admin if MailNotifier is enabled and there is write access to environment variables via the UI.</system-out><system-err>location: /home/khannasa/.m2/repository/org/thymeleaf/thymeleaf-spring4/2.1.5.RELEASE/thymeleaf-spring4-2.1.5.RELEASE.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="163" name="/home/khannasa/.m2/repository/org/apache/tomcat/tomcat-annotations-api/8.5.85/tomcat-annotations-api-8.5.85.jar" package="tomcat-annotations-api-8.5.85.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="tomcat-annotations-api-8.5.85.jar"/></testsuite><testsuite failures="7" errors="0" time="0" id="164" name="/home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.85/tomcat-embed-core-8.5.85.jar" package="tomcat-embed-core-8.5.85.jar" skipped="0" tests="7" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2023-28709" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@8.5.85"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The fix for CVE-2023-24998 was incomplete for Apache Tomcat 11.0.0-M2 to 11.0.0-M4, 10.1.5 to 10.1.7, 9.0.71 to 9.0.73 and 8.5.85 to 8.5.87. If non-default HTTP       connector settings were used such that the maxParameterCount could be reached using query string parameters and a request was       submitted that supplied exactly maxParameterCount parameters in the query string, the limit for uploaded request parts could be bypassed with the potential for a denial of service to occur.




</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.85/tomcat-embed-core-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-42794" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@8.5.85"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Incomplete Cleanup vulnerability in Apache Tomcat.

The internal fork of Commons FileUpload packaged with Apache Tomcat 9.0.70 through 9.0.80 and 8.5.85 through 8.5.93 included an unreleased, 
in progress refactoring that exposed a potential denial of service on 
Windows if a web application opened a stream for an uploaded file but 
failed to close the stream. The file would never be deleted from disk 
creating the possibility of an eventual denial of service due to the 
disk being full.

Users are recommended to upgrade to version 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.

</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.85/tomcat-embed-core-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-44487" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@8.5.85"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.85/tomcat-embed-core-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-41080" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@8.5.85"><failure message="cvssV3: MEDIUM, score: 6.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N)"/><system-out>URL Redirection to Untrusted Site (&apos;Open Redirect&apos;) vulnerability in FORM authentication feature Apache Tomcat.This issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.0-M10, from 10.1.0-M1 through 10.0.12, from 9.0.0-M1 through 9.0.79 and from 8.5.0 through 8.5.92.

The vulnerability is limited to the ROOT (default) web application.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.85/tomcat-embed-core-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-42795" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@8.5.85"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Incomplete Cleanup vulnerability in Apache Tomcat.When recycling various internal objects in Apache Tomcat from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.80 and from 8.5.0 through 8.5.93, an error could 
cause Tomcat to skip some parts of the recycling process leading to 
information leaking from the current request/response to the next.

Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.

</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.85/tomcat-embed-core-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-45648" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@8.5.85"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>Improper Input Validation vulnerability in Apache Tomcat.Tomcat from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.81 and from 8.5.0 through 8.5.93 did not correctly parse HTTP trailer headers. A specially 
crafted, invalid trailer header could cause Tomcat to treat a single 
request as multiple requests leading to the possibility of request 
smuggling when behind a reverse proxy.

Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fix the issue.

</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.85/tomcat-embed-core-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-28708" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@8.5.85"><failure message="cvssV3: MEDIUM, score: 4.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N)"/><system-out>
When using the RemoteIpFilter with requests received from a    reverse proxy via HTTP that include the X-Forwarded-Proto    header set to https, session cookies created by Apache Tomcat 11.0.0-M1 to 11.0.0.-M2, 10.1.0-M1 to 10.1.5, 9.0.0-M1 to 9.0.71 and 8.5.0 to 8.5.85 did not include the secure attribute. This could result in the user agent transmitting the session cookie over an insecure channel.







</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.85/tomcat-embed-core-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="165" name="/home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/8.5.85/tomcat-embed-el-8.5.85.jar" package="tomcat-embed-el-8.5.85.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="tomcat-embed-el-8.5.85.jar"/></testsuite><testsuite failures="8" errors="0" time="0" id="166" name="/home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.85/tomcat-embed-websocket-8.5.85.jar" package="tomcat-embed-websocket-8.5.85.jar" skipped="0" tests="8" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-8022" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@8.5.85"><failure message="cvssV3: HIGH, score: 7.8 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Incorrect Default Permissions vulnerability in the packaging of tomcat on SUSE Enterprise Storage 5, SUSE Linux Enterprise Server 12-SP2-BCL, SUSE Linux Enterprise Server 12-SP2-LTSS, SUSE Linux Enterprise Server 12-SP3-BCL, SUSE Linux Enterprise Server 12-SP3-LTSS, SUSE Linux Enterprise Server 12-SP4, SUSE Linux Enterprise Server 12-SP5, SUSE Linux Enterprise Server 15-LTSS, SUSE Linux Enterprise Server for SAP 12-SP2, SUSE Linux Enterprise Server for SAP 12-SP3, SUSE Linux Enterprise Server for SAP 15, SUSE OpenStack Cloud 7, SUSE OpenStack Cloud 8, SUSE OpenStack Cloud Crowbar 8 allows local attackers to escalate from group tomcat to root. This issue affects: SUSE Enterprise Storage 5 tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP2-BCL tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP2-LTSS tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP3-BCL tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP3-LTSS tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP4 tomcat versions prior to 9.0.35-3.39.1. SUSE Linux Enterprise Server 12-SP5 tomcat versions prior to 9.0.35-3.39.1. SUSE Linux Enterprise Server 15-LTSS tomcat versions prior to 9.0.35-3.57.3. SUSE Linux Enterprise Server for SAP 12-SP2 tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server for SAP 12-SP3 tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server for SAP 15 tomcat versions prior to 9.0.35-3.57.3. SUSE OpenStack Cloud 7 tomcat versions prior to 8.0.53-29.32.1. SUSE OpenStack Cloud 8 tomcat versions prior to 8.0.53-29.32.1. SUSE OpenStack Cloud Crowbar 8 tomcat versions prior to 8.0.53-29.32.1.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.85/tomcat-embed-websocket-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-28709" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@8.5.85"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The fix for CVE-2023-24998 was incomplete for Apache Tomcat 11.0.0-M2 to 11.0.0-M4, 10.1.5 to 10.1.7, 9.0.71 to 9.0.73 and 8.5.85 to 8.5.87. If non-default HTTP       connector settings were used such that the maxParameterCount could be reached using query string parameters and a request was       submitted that supplied exactly maxParameterCount parameters in the query string, the limit for uploaded request parts could be bypassed with the potential for a denial of service to occur.




</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.85/tomcat-embed-websocket-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-42794" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@8.5.85"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Incomplete Cleanup vulnerability in Apache Tomcat.

The internal fork of Commons FileUpload packaged with Apache Tomcat 9.0.70 through 9.0.80 and 8.5.85 through 8.5.93 included an unreleased, 
in progress refactoring that exposed a potential denial of service on 
Windows if a web application opened a stream for an uploaded file but 
failed to close the stream. The file would never be deleted from disk 
creating the possibility of an eventual denial of service due to the 
disk being full.

Users are recommended to upgrade to version 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.

</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.85/tomcat-embed-websocket-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-44487" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@8.5.85"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.85/tomcat-embed-websocket-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-41080" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@8.5.85"><failure message="cvssV3: MEDIUM, score: 6.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N)"/><system-out>URL Redirection to Untrusted Site (&apos;Open Redirect&apos;) vulnerability in FORM authentication feature Apache Tomcat.This issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.0-M10, from 10.1.0-M1 through 10.0.12, from 9.0.0-M1 through 9.0.79 and from 8.5.0 through 8.5.92.

The vulnerability is limited to the ROOT (default) web application.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.85/tomcat-embed-websocket-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-42795" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@8.5.85"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>Incomplete Cleanup vulnerability in Apache Tomcat.When recycling various internal objects in Apache Tomcat from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.80 and from 8.5.0 through 8.5.93, an error could 
cause Tomcat to skip some parts of the recycling process leading to 
information leaking from the current request/response to the next.

Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.

</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.85/tomcat-embed-websocket-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-45648" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@8.5.85"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>Improper Input Validation vulnerability in Apache Tomcat.Tomcat from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.81 and from 8.5.0 through 8.5.93 did not correctly parse HTTP trailer headers. A specially 
crafted, invalid trailer header could cause Tomcat to treat a single 
request as multiple requests leading to the possibility of request 
smuggling when behind a reverse proxy.

Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fix the issue.

</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.85/tomcat-embed-websocket-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2023-28708" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@8.5.85"><failure message="cvssV3: MEDIUM, score: 4.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N)"/><system-out>
When using the RemoteIpFilter with requests received from a    reverse proxy via HTTP that include the X-Forwarded-Proto    header set to https, session cookies created by Apache Tomcat 11.0.0-M1 to 11.0.0.-M2, 10.1.0-M1 to 10.1.5, 9.0.0-M1 to 9.0.71 and 8.5.0 to 8.5.85 did not include the secure attribute. This could result in the user agent transmitting the session cookie over an insecure channel.







</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.85/tomcat-embed-websocket-8.5.85.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="167" name="/home/khannasa/.m2/repository/org/apache/tomcat/tomcat-jdbc/8.5.85/tomcat-jdbc-8.5.85.jar" package="tomcat-jdbc-8.5.85.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="tomcat-jdbc-8.5.85.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="168" name="/home/khannasa/.m2/repository/org/apache/tomcat/tomcat-juli/8.5.85/tomcat-juli-8.5.85.jar" package="tomcat-juli-8.5.85.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="tomcat-juli-8.5.85.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="169" name="/home/khannasa/.m2/repository/org/unbescape/unbescape/1.1.0.RELEASE/unbescape-1.1.0.RELEASE.jar" package="unbescape-1.1.0.RELEASE.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="unbescape-1.1.0.RELEASE.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="170" name="/home/khannasa/.m2/repository/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar" package="validation-api-1.1.0.Final.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="validation-api-1.1.0.Final.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="171" name="/home/khannasa/.m2/repository/org/apache/velocity/velocity/1.7/velocity-1.7.jar" package="velocity-1.7.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2020-13936" name="pkg:maven/org.apache.velocity/velocity@1.7"><failure message="cvssV3: HIGH, score: 8.8 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>An attacker that is able to modify Velocity templates may execute arbitrary Java code or run arbitrary system commands with the same privileges as the account running the Servlet container. This applies to applications that allow untrusted users to upload/modify velocity templates running Apache Velocity Engine versions up to 2.2.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/velocity/velocity/1.7/velocity-1.7.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="172" name="/home/khannasa/.m2/repository/org/codehaus/woodstox/woodstox-core-asl/4.4.1/woodstox-core-asl-4.4.1.jar" package="woodstox-core-asl-4.4.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-40152" name="pkg:maven/org.codehaus.woodstox/woodstox-core-asl@4.4.1"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Those using Woodstox to parse XML data may be vulnerable to Denial of Service attacks (DOS) if DTD support is enabled. If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.</system-out><system-err>location: /home/khannasa/.m2/repository/org/codehaus/woodstox/woodstox-core-asl/4.4.1/woodstox-core-asl-4.4.1.jar, project-references: [ java-sec-code:runtime ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="173" name="/home/khannasa/.m2/repository/com/rackspace/apache/xerces2-xsd11/2.11.1/xerces2-xsd11-2.11.1.jar" package="xerces2-xsd11-2.11.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2013-4002" name="pkg:maven/com.rackspace.apache/xerces2-xsd11@2.11.1"><failure message="cvssV2: HIGH, score: 7.1 (/AV:N/AC:M/Au:N/C:N/I:N/A:C)"/><system-out>XMLscanner.java in Apache Xerces2 Java Parser before 2.12.0, as used in the Java Runtime Environment (JRE) in IBM Java 5.0 before 5.0 SR16-FP3, 6 before 6 SR14, 6.0.1 before 6.0.1 SR6, and 7 before 7 SR5 as well as Oracle Java SE 7u40 and earlier, Java SE 6u60 and earlier, Java SE 5.0u51 and earlier, JRockit R28.2.8 and earlier, JRockit R27.7.6 and earlier, Java SE Embedded 7u40 and earlier, and possibly other products allows remote attackers to cause a denial of service via vectors related to XML attribute names.</system-out><system-err>location: /home/khannasa/.m2/repository/com/rackspace/apache/xerces2-xsd11/2.11.1/xerces2-xsd11-2.11.1.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="174" name="/home/khannasa/.m2/repository/com/monitorjbl/xlsx-streamer/2.0.0/xlsx-streamer-2.0.0.jar" package="xlsx-streamer-2.0.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2022-23640" name="pkg:maven/com.monitorjbl/xlsx-streamer@2.0.0"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Excel-Streaming-Reader is an easy-to-use implementation of a streaming Excel reader using Apache POI. Prior to xlsx-streamer 2.1.0, the XML parser that was used did apply all the necessary settings to prevent XML Entity Expansion issues. Upgrade to version 2.1.0 to receive a patch. There is no known workaround.</system-out><system-err>location: /home/khannasa/.m2/repository/com/monitorjbl/xlsx-streamer/2.0.0/xlsx-streamer-2.0.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="175" name="/home/khannasa/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar" package="xml-apis-1.4.01.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="xml-apis-1.4.01.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="176" name="/home/khannasa/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar" package="xml-resolver-1.2.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="xml-resolver-1.2.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="177" name="/home/khannasa/.m2/repository/org/apache/xmlbeans/xmlbeans/2.3.0/xmlbeans-2.3.0.jar" package="xmlbeans-2.3.0.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2021-23926" name="pkg:maven/org.apache.xmlbeans/xmlbeans@2.3.0"><failure message="cvssV3: CRITICAL, score: 9.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H)"/><system-out>The XML parsers used by XMLBeans up to version 2.6.0 did not set the properties needed to protect the user from malicious XML input. Vulnerabilities include possibilities for XML Entity Expansion attacks. Affects XMLBeans up to and including v2.6.0.</system-out><system-err>location: /home/khannasa/.m2/repository/org/apache/xmlbeans/xmlbeans/2.3.0/xmlbeans-2.3.0.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="178" name="/home/khannasa/.m2/repository/org/xmlbeam/xmlprojector/1.4.13/xmlprojector-1.4.13.jar" package="xmlprojector-1.4.13.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2018-1259" name="pkg:maven/org.xmlbeam/xmlprojector@1.4.13"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>Spring Data Commons, versions 1.13 prior to 1.13.12 and 2.0 prior to 2.0.7, used in combination with XMLBeam 1.4.14 or earlier versions, contains a property binder vulnerability caused by improper restriction of XML external entity references as underlying library XMLBeam does not restrict external reference expansion. An unauthenticated remote malicious user can supply specially crafted request parameters against Spring Data&apos;s projection-based request payload binding to access arbitrary files on the system.</system-out><system-err>location: /home/khannasa/.m2/repository/org/xmlbeam/xmlprojector/1.4.13/xmlprojector-1.4.13.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="179" name="/home/khannasa/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar" package="xmlpull-1.1.3.1.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="xmlpull-1.1.3.1.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="180" name="/home/khannasa/.m2/repository/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.jar" package="xpp3_min-1.1.4c.jar" skipped="0" tests="1" timestamp="2023-11-20T12:53:35.601"><testcase classname="dependency-check" name="xpp3_min-1.1.4c.jar"/></testsuite><testsuite failures="35" errors="0" time="0" id="181" name="/home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar" package="xstream-1.4.10.jar" skipped="0" tests="35" timestamp="2023-11-20T12:53:35.601"><testcase classname="CVE-2021-21345" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: CRITICAL, score: 9.9 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker who has sufficient rights to execute commands of the host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.16.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2013-7285" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Xstream API versions up to 1.4.6 and version 1.4.10, if the security framework has not been initialized, may allow a remote attacker to run arbitrary shell commands by manipulating the processed input stream when unmarshaling XML or any supported format. e.g. JSON.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2019-10173" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>It was found that xstream API version 1.4.10 before 1.4.11 introduced a regression for a previous deserialization flaw. If the security framework has not been initialized, it may allow a remote attacker to run arbitrary shell commands when unmarshalling XML or any supported format. e.g. JSON. (regression of CVE-2013-7285)</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-21344" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.16.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-21346" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.16.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-21347" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.16.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-21350" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to execute arbitrary code only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.16.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-21342" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: CRITICAL, score: 9.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability where the processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in a server-side forgery request. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.16.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-21351" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: CRITICAL, score: 9.1 (CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.16.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-26217" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.8 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>XStream before version 1.4.14 is vulnerable to Remote Code Execution.The vulnerability may allow a remote attacker to run arbitrary shell commands only by manipulating the processed input stream. Only users who rely on blocklists are affected. Anyone using XStream&apos;s Security Framework allowlist is not affected. The linked advisory provides code workarounds for users who cannot upgrade. The issue is fixed in version 1.4.14.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-29505" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.8 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>XStream is software for serializing Java objects to XML and back again. A vulnerability in XStream versions prior to 1.4.17 may allow a remote attacker has sufficient rights to execute commands of the host only by manipulating the processed input stream. No user who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types is affected. The vulnerability is patched in version 1.4.17.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39139" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.8 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. A user is only affected if using the version out of the box with JDK 1.7u21 or below. However, this scenario can be adjusted easily to an external Xalan that works regardless of the version of the Java runtime. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-21349" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.6 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to request data from internal resources that are not publicly available only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.16.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39141" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39144" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker has sufficient rights to execute commands of the host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39145" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39146" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39147" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39148" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39149" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39150" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to request data from internal resources that are not publicly available only by manipulating the processed input stream with a Java runtime version 14 to 8. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.18.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39151" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39152" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to request data from internal resources that are not publicly available only by manipulating the processed input stream with a Java runtime version 14 to 8. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.18.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39153" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream, if using the version out of the box with Java runtime version 14 to 8 or with JavaFX installed. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39154" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 8.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-26258" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 7.7 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.15, a Server-Side Forgery Request vulnerability can be activated when unmarshalling. The vulnerability may allow a remote attacker to request data from internal resources that are not publicly available only by manipulating the processed input stream. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.15. The reported vulnerability does not exist if running Java 15 or higher. No user is affected who followed the recommendation to setup XStream&apos;s Security Framework with a whitelist! Anyone relying on XStream&apos;s default blacklist can immediately switch to a whilelist for the allowed types to avoid the vulnerability. Users of XStream 1.4.14 or below who still want to use XStream default blacklist can use a workaround described in more detailed in the referenced advisories.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-21341" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is vulnerability which may allow a remote attacker to allocate 100% CPU time on the target system depending on CPU type or parallel execution of such a payload resulting in a denial of service only by manipulating the processed input stream. No user is affected who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.16.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-21343" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability where the processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in the deletion of a file on the local host. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.16.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-21348" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.16, there is a vulnerability which may allow a remote attacker to occupy a thread that consumes maximum CPU time and will never return. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.16.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-43859" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>XStream is an open source java library to serialize objects to XML and back again. Versions prior to 1.4.19 may allow a remote attacker to allocate 100% CPU time on the target system depending on CPU type or parallel execution of such a payload resulting in a denial of service only by manipulating the processed input stream. XStream 1.4.19 monitors and accumulates the time it takes to add elements to collections and throws an exception if a set threshold is exceeded. Users are advised to upgrade as soon as possible. Users unable to upgrade may set the NO_REFERENCE mode to prevent recursion. See GHSA-rmr5-cpv2-vgjf for further details on a workaround if an upgrade is not possible.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-40151" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Those using Xstream to seralize XML data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-40152" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Those using Woodstox to parse XML data may be vulnerable to Denial of Service attacks (DOS) if DTD support is enabled. If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2022-41966" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>XStream serializes Java objects to XML and back again. Versions prior to 1.4.20 may allow a remote attacker to terminate the application with a stack overflow error, resulting in a denial of service only via manipulation the processed input stream. The attack uses the hash code implementation for collections and maps to force recursive hash calculation causing a stack overflow. This issue is patched in version 1.4.20 which handles the stack overflow and raises an InputManipulationException instead. A potential workaround for users who only use HashMap or HashSet and whose XML refers these only as default map or set, is to change the default implementation of java.util.Map and java.util per the code example in the referenced advisory. However, this implies that your application does not care about the implementation of the map and all elements are comparable.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2020-26259" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: MEDIUM, score: 6.8 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:N/I:H/A:N)"/><system-out>XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.15, is vulnerable to an Arbitrary File Deletion on the local host when unmarshalling. The vulnerability may allow a remote attacker to delete arbitrary know files on the host as log as the executing process has sufficient rights only by manipulating the processed input stream. If you rely on XStream&apos;s default blacklist of the Security Framework, you will have to use at least version 1.4.15. The reported vulnerability does not exist running Java 15 or higher. No user is affected, who followed the recommendation to setup XStream&apos;s Security Framework with a whitelist! Anyone relying on XStream&apos;s default blacklist can immediately switch to a whilelist for the allowed types to avoid the vulnerability. Users of XStream 1.4.14 or below who still want to use XStream default blacklist can use a workaround described in more detailed in the referenced advisories.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase><testcase classname="CVE-2021-39140" name="pkg:maven/com.thoughtworks.xstream/xstream@1.4.10"><failure message="cvssV3: MEDIUM, score: 6.3 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:N/I:N/A:H)"/><system-out>XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker to allocate 100% CPU time on the target system depending on CPU type or parallel execution of such a payload resulting in a denial of service only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream&apos;s security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.</system-out><system-err>location: /home/khannasa/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar, project-references: [ java-sec-code:compile ]</system-err></testcase></testsuite></testsuites>